return {
	  -- MTA functions and events
	addAccount = {
		type = "function",
		args = "(string name, string pass [, bool allowCaseVariations = false])",
		returns = "account",
	},
	copyAccountData = {
		type = "function",
		args = "(account theAccount, account fromAccount)",
		returns = "bool",
	},
	getAccount = {
		type = "function",
		args = "(string username, [ string password ])",
		returns = "account",
	},
	getAccountData = {
		type = "function",
		args = "(account theAccount, string key)",
		returns = "string",
	},
	getAccountName = {
		type = "function",
		args = "(account theAccount)",
		returns = "string",
	},
	getAccountPlayer = {
		type = "function",
		args = "(account theAccount)",
		returns = "player",
	},
	getAccountSerial = {
		type = "function",
		args = "(account theAccount)",
		returns = "string",
	},
	getAccounts = {
		type = "function",
		args = "()",
		returns = "table",
	},
	getAccountsBySerial = {
		type = "function",
		args = "(string serial)",
		returns = "table",
	},
	getAllAccountData = {
		type = "function",
		args = "(account theAccount)",
		returns = "table",
	},
	getPlayerAccount = {
		type = "function",
		args = "(player theAccount)",
		returns = "account",
	},
	isGuestAccount = {
		type = "function",
		args = "(account theAccount)",
		returns = "bool",
	},
	logIn = {
		type = "function",
		args = "(player theAccount, account theAccount, string thePassword)",
		returns = "bool",
	},
	logOut = {
		type = "function",
		args = "(player theAccount)",
		returns = "bool",
	},
	removeAccount = {
		type = "function",
		args = "(account theAccount)",
		returns = "boool",
	},
	setAccountData = {
		type = "function",
		args = "(account theAccount, string key, string value)",
		returns = "bool",
	},
	setAccountPassword = {
		type = "function",
		args = "(account theAccount, string password)",
		returns = "bool",
	},
	getAccountByID = {
		type = "function",
		args = "(int id)",
		returns = "account",
	},
	getAccountID = {
		type = "function",
		args = "(account theAccount)",
		returns = "int",
	},
	getAccountIP = {
		type = "function",
		args = "(account theAccount)",
		returns = "string",
	},
	getAccountsByData = {
		type = "function",
		args = "(string dataName, string value)",
		returns = "table",
	},
	getAccountsByIP = {
		type = "function",
		args = "(string ip)",
		returns = "table",
	},
	setAccountName = {
		type = "function",
		args = "(account theAccount, string name [, bool allowCaseVariations = false])",
		returns = "bool",
	},
	aclCreate = {
		type = "function",
		args = "(string aclName)",
		returns = "acl",
	},
	aclCreateGroup = {
		type = "function",
		args = "(string groupName)",
		returns = "aclgroup",
	},
	aclDestroy = {
		type = "function",
		args = "(acl theAC)",
		returns = "bool",
	},
	aclDestroyGroup = {
		type = "function",
		args = "(aclgroup aclGroup)",
		returns = "bool",
	},
	aclGet = {
		type = "function",
		args = "(string aclName)",
		returns = "acl",
	},
	aclGetGroup = {
		type = "function",
		args = "(string groupName)",
		returns = "aclgroup",
	},
	aclGetName = {
		type = "function",
		args = "(acl theAcl)",
		returns = "string",
	},
	aclGetRight = {
		type = "function",
		args = "(acl theAcl, string rightName)",
		returns = "bool",
	},
	aclGroupAddACL = {
		type = "function",
		args = "(aclgroup theGroup, acl theACL)",
		returns = "bool",
	},
	aclGroupAddObject = {
		type = "function",
		args = "(aclgroup theGroup, string theObjectName)",
		returns = "bool",
	},
	aclGroupGetName = {
		type = "function",
		args = "(aclgroup aclGroup)",
		returns = "string",
	},
	aclGroupList = {
		type = "function",
		args = "()",
		returns = "table",
	},
	aclGroupListACL = {
		type = "function",
		args = "(aclgroup theGroup)",
		returns = "table",
	},
	aclGroupListObjects = {
		type = "function",
		args = "(aclgroup theGroup)",
		returns = "table",
	},
	aclGroupRemoveACL = {
		type = "function",
		args = "(aclgroup theGroup, acl theACL)",
		returns = "bool",
	},
	aclGroupRemoveObject = {
		type = "function",
		args = "(aclgroup theGroup, string theObjectString)",
		returns = "bool",
	},
	aclList = {
		type = "function",
		args = "()",
		returns = "table",
	},
	aclListRights = {
		type = "function",
		args = "(acl theACL, string allowedType)",
		returns = "table",
	},
	aclReload = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	aclRemoveRight = {
		type = "function",
		args = "(acl theAcl, string rightName)",
		returns = "bool",
	},
	aclSave = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	aclSetRight = {
		type = "function",
		args = "(acl theAcl, string rightName, bool hasAccess)",
		returns = "bool",
	},
	hasObjectPermissionTo = {
		type = "function",
		args = "(string / element theObject, string theAction [, bool defaultPermission = true ])",
		returns = "bool",
	},
	isObjectInACLGroup = {
		type = "function",
		args = "(string theObject, aclgroup theGroup)",
		returns = "bool",
	},
	addBan = {
		type = "function",
		args = "([ string IP, string Username, string Serial, player responsibleElement, string reason, int seconds = 0 ])",
		returns = "ban",
	},
	banPlayer = {
		type = "function",
		args = "(player bannedPlayer, [ bool IP = true, bool Username = false, bool Serial = false, player/string responsiblePlayer = nil, string reason = nil, int seconds = 0 ])",
		returns = "ban",
	},
	getBanAdmin = {
		type = "function",
		args = "(ban theBan)",
		returns = "string",
	},
	getBanIP = {
		type = "function",
		args = "(ban theBan)",
		returns = "string",
	},
	getBanNick = {
		type = "function",
		args = "(ban theBan)",
		returns = "string",
	},
	getBanReason = {
		type = "function",
		args = "(ban theBan)",
		returns = "string",
	},
	getBanSerial = {
		type = "function",
		args = "(ban theBan)",
		returns = "string",
	},
	getBanTime = {
		type = "function",
		args = "(ban theBan)",
		returns = "int",
	},
	getBans = {
		type = "function",
		args = "()",
		returns = "table",
	},
	getUnbanTime = {
		type = "function",
		args = "(ban theBan)",
		returns = "int",
	},
	isBan = {
		type = "function",
		args = "(ban theBan)",
		returns = "int",
	},
	kickPlayer = {
		type = "function",
		args = "(player kickedPlayer, [ player/string responsiblePlayer, string reason = ''])",
		returns = "bool",
	},
	setBanAdmin = {
		type = "function",
		args = "(ban theBan, string theAdmin)",
		returns = "bool",
	},
	setBanNick = {
		type = "function",
		args = "(ban theBan, string theNick)",
		returns = "bool",
	},
	setBanReason = {
		type = "function",
		args = "(ban theBan, string theReason)",
		returns = "bool",
	},
	setUnbanTime = {
		type = "function",
		args = "(ban theBan, int theTime)",
		returns = "bool",
	},
	reloadBans = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	removeBan = {
		type = "function",
		args = "(ban theBan [, player responsibleElement = nil ])",
		returns = "bool",
	},
	playSoundFrontEnd = {
		type = "function",
		args = "(player thePlayer, int sound)",
		returns = "bool",
	},
	getGameType = {
		type = "function",
		args = "()",
		returns = "string",
	},
	getMapName = {
		type = "function",
		args = "()",
		returns = "string",
	},
	getRuleValue = {
		type = "function",
		args = "(string key)",
		returns = "string",
	},
	removeRuleValue = {
		type = "function",
		args = "(string key)",
		returns = "bool",
	},
	setGameType = {
		type = "function",
		args = "(string gameType)",
		returns = "bool",
	},
	setMapName = {
		type = "function",
		args = "(string mapName)",
		returns = "bool",
	},
	setRuleValue = {
		type = "function",
		args = "(string key, string value)",
		returns = "bool",
	},
	createBlip = {
		type = "function",
		args = "(float x, float y, float z [, int icon = 0, int size = 2, int r = 255, int g = 0, int b = 0, int a = 255, int ordering = 0, float visibleDistance = 16383.0, visibleTo = getRootElement()])",
		returns = "blip",
	},
	createBlipAttachedTo = {
		type = "function",
		args = "(element elementToAttachTo [, int icon = 0, int size = 2, int r = 255, int g = 0, int b = 0, int a = 255, int ordering = 0, float visibleDistance = 16383.0, visibleTo = getRootElement()])",
		returns = "blip",
	},
	getBlipColor = {
		type = "function",
		args = "(blip theBlip)",
		returns = "int int int int",
	},
	getBlipIcon = {
		type = "function",
		args = "(blip theBlip)",
		returns = "int",
	},
	getBlipOrdering = {
		type = "function",
		args = "(blip theBlip)",
		returns = "int",
	},
	getBlipSize = {
		type = "function",
		args = "(blip theBlip)",
		returns = "int",
	},
	getBlipVisibleDistance = {
		type = "function",
		args = "(blip theBlip)",
		returns = "float",
	},
	setBlipColor = {
		type = "function",
		args = "(blip theBlip, int red, int green, int blue, int alpha)",
		returns = "bool",
	},
	setBlipIcon = {
		type = "function",
		args = "(blip theBlip, int icon)",
		returns = "bool",
	},
	setBlipOrdering = {
		type = "function",
		args = "(blip theBlip, int ordering)",
		returns = "bool",
	},
	setBlipSize = {
		type = "function",
		args = "(blip theBlip, int iconSize)",
		returns = "bool",
	},
	setBlipVisibleDistance = {
		type = "function",
		args = "(blip theBlip, float theDistance)",
		returns = "bool",
	},
	fadeCamera = {
		type = "function",
		args = "(player thePlayer, bool fadeIn, [ float timeToFade = 1.0, int red = 0, int green = 0, int blue = 0 ])",
		returns = "bool",
	},
	getCameraInterior = {
		type = "function",
		args = "(player thePlayer)",
		returns = "int",
	},
	getCameraMatrix = {
		type = "function",
		args = "(player thePlayer)",
		returns = "8 floats",
	},
	getCameraTarget = {
		type = "function",
		args = "(player thePlayer)",
		returns = "element",
	},
	setCameraInterior = {
		type = "function",
		args = "(player thePlayer, int interior)",
		returns = "bool",
	},
	setCameraMatrix = {
		type = "function",
		args = "(player thePlayer, float positionX, float positionY, float positionZ [, float lookAtX, float lookAtY, float lookAtZ, float roll = 0, float fov = 70 ])",
		returns = "bool",
	},
	setCameraTarget = {
		type = "function",
		args = "(player thePlayer [, player target = nil ])",
		returns = "bool",
	},
	getBodyPartName = {
		type = "function",
		args = "(int bodyPartID)",
		returns = "string",
	},
	getClothesByTypeIndex = {
		type = "function",
		args = "(int clothesType, int clothesIndex)",
		returns = "string",
	},
	getClothesTypeName = {
		type = "function",
		args = "(int clothesType)",
		returns = "string",
	},
	getTypeIndexFromClothes = {
		type = "function",
		args = "(string clothesTexture, string clothesModel)",
		returns = "int int",
	},
	createColCircle = {
		type = "function",
		args = "(float fX, float fY, float radius)",
		returns = "colshape",
	},
	createColCuboid = {
		type = "function",
		args = "(float fX, float fY, float fZ, float fWidth, float fDepth, float fHeight)",
		returns = "colshape",
	},
	createColPolygon = {
		type = "function",
		args = "(float fX, float fY, float fX1, float fY1, float fX2, float fY2, float fX3, float fY3, ...)",
		returns = "colshape",
	},
	createColRectangle = {
		type = "function",
		args = "(float fX, float fY, float fWidth, float fHeight)",
		returns = "colshape",
	},
	createColSphere = {
		type = "function",
		args = "(float fX, float fY, float fZ, float fRadius)",
		returns = "colshape",
	},
	createColTube = {
		type = "function",
		args = "(float fX, float fY, float fZ, float fRadius, float fHeight)",
		returns = "colshape",
	},
	getColShapeTypegetColShapeType = {
		type = "function",
		args = "(colshape shape)",
		returns = "string",
	},
	getElementColShape = {
		type = "function",
		args = "(element theElement)",
		returns = "colshape",
	},
	getElementsWithinColShape = {
		type = "function",
		args = "(colshape theShape [, string elemType = nil ])",
		returns = "table",
	},
	isElementWithinColShape = {
		type = "function",
		args = "(element theElement, colshape theShape)",
		returns = "bool",
	},
	isInsideColShape = {
		type = "function",
		args = "(colshape theShape, float posX, float posY, float posZ)",
		returns = "bool",
	},
	isCursorShowing = {
		type = "function",
		args = "(player thePlayer)",
		returns = "bool",
	},
	showCursor = {
		type = "function",
		args = "(player thePlayer, bool show, [bool toggleControls = true])",
		returns = "bool",
	},
	attachElements = {
		type = "function",
		args = "(element theElement, element theAttachToElement, [float xPosOffset = 0, float yPosOffset = 0, float zPosOffset = 0, float xRotOffset = 0, float yRotOffset = 0, float zRotOffset = 0])",
		returns = "bool",
	},
	clearElementVisibleTo = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	cloneElement = {
		type = "function",
		args = "(element theElement, [float xPos = 0, float yPos = 0, float zPos = 0, bool cloneChildren = false])",
		returns = "element",
	},
	createElement = {
		type = "function",
		args = "(string elementType, [string elementID = nil])",
		returns = "element",
	},
	destroyElement = {
		type = "function",
		args = "(element elementToDestroy)",
		returns = "bool",
	},
	detachElements = {
		type = "function",
		args = "(element theElement, [element theAttachToElement])",
		returns = "bool",
	},
	getAllElementData = {
		type = "function",
		args = "(element theElement)",
		returns = "table",
	},
	getAttachedElements = {
		type = "function",
		args = "(element theElement)",
		returns = "table",
	},
	getElementAlpha = {
		type = "function",
		args = "(element theElement)",
		returns = "int",
	},
	getElementAttachedOffsets = {
		type = "function",
		args = "(element theElement)",
		returns = "6 floats",
	},
	getElementAttachedTo = {
		type = "function",
		args = "(element theElement)",
		returns = "element",
	},
	getElementCollisionsEnabled = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	getElementByID = {
		type = "function",
		args = "(string id [, int index = 0 ])",
		returns = "element",
	},
	getElementByIndex = {
		type = "function",
		args = "(string theType, int index)",
		returns = "element",
	},
	getElementChild = {
		type = "function",
		args = "(element parent, int index)",
		returns = "element",
	},
	getElementChildren = {
		type = "function",
		args = "(element parent [, string theType = nil ])",
		returns = "table",
	},
	getElementChildrenCount = {
		type = "function",
		args = "(element parent)",
		returns = "int",
	},
	getElementColShape = {
		type = "function",
		args = "(element theElement)",
		returns = "colshape",
	},
	getElementData = {
		type = "function",
		args = "(element theElement, string key [, inherit = true])",
		returns = "var",
	},
	getElementDimension = {
		type = "function",
		args = "(element theElement)",
		returns = "int",
	},
	getElementHealth = {
		type = "function",
		args = "(element theElement)",
		returns = "float",
	},
	getElementID = {
		type = "function",
		args = "(element theElement)",
		returns = "string",
	},
	getElementInterior = {
		type = "function",
		args = "(element theElement)",
		returns = "int",
	},
	getElementMatrix = {
		type = "function",
		args = "(element theElement [, bool legacy = true ])",
		returns = "table",
	},
	getElementModel = {
		type = "function",
		args = "(element theElement)",
		returns = "int",
	},
	getElementParent = {
		type = "function",
		args = "(element theElement)",
		returns = "element",
	},
	getElementPosition = {
		type = "function",
		args = "(element theElement)",
		returns = "3 floats",
	},
	getElementRotation = {
		type = "function",
		args = "(element theElement [, string rotOrder = 'default' ])",
		returns = "3 floats",
	},
	getElementSyncer = {
		type = "function",
		args = "(element theElement)",
		returns = "element",
	},
	getElementType = {
		type = "function",
		args = "(element theElement)",
		returns = "string",
	},
	getElementVelocity = {
		type = "function",
		args = "(element theElement)",
		returns = "3 floats",
	},
	getElementZoneName = {
		type = "function",
		args = "(element theElement, [bool citiesonly = false])",
		returns = "string",
	},
	getElementsByType = {
		type = "function",
		args = "(string theType, [ element startat=getRootElement() ])",
		returns = "table",
	},
	getElementsWithinColShape = {
		type = "function",
		args = "(colshape theShape [, string elemType = nil ])",
		returns = "table",
	},
	getLowLODElement = {
		type = "function",
		args = "(element theElement)",
		returns = "element",
	},
	getRootElement = {
		type = "function",
		args = "()",
		returns = "element",
	},
	isElement = {
		type = "function",
		args = "(var theValue)",
		returns = "bool",
	},
	isElementAttached = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementCallPropagationEnabled = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementDoubleSided = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementFrozen = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementInWater = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementLowLOD = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementVisibleTo = {
		type = "function",
		args = "(element theElement, element visibleTo)",
		returns = "bool",
	},
	isElementWithinColShape = {
		type = "function",
		args = "(element theElement, colshape theShape)",
		returns = "bool",
	},
	isElementWithinMarker = {
		type = "function",
		args = "(element theElement, marker theMarker)",
		returns = "bool",
	},
	removeElementData = {
		type = "function",
		args = "(element theElement, string key)",
		returns = "bool",
	},
	setElementAlpha = {
		type = "function",
		args = "(element theElement, int alpha)",
		returns = "bool",
	},
	setElementAngularVelocity = {
		type = "function",
		args = "(element theElement, float rx, float ry, float rz)",
		returns = "bool",
	},
	getElementAngularVelocity = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	setElementAttachedOffsets = {
		type = "function",
		args = "(element theElement, [ float xPosOffset, float yPosOffset, float zPosOffset, float xRotOffset, float yRotOffset, float zRotOffset ])",
		returns = "bool",
	},
	setElementCallPropagationEnabled = {
		type = "function",
		args = "(element theElement, bool enabled)",
		returns = "bool",
	},
	setElementCollisionsEnabled = {
		type = "function",
		args = "(element theElement, bool enabled)",
		returns = "bool",
	},
	setElementData = {
		type = "function",
		args = "(element theElement, string key, var value [, bool synchronize = true ])",
		returns = "bool",
	},
	setElementDimension = {
		type = "function",
		args = "(element theElement, int dimension)",
		returns = "bool",
	},
	setElementDoubleSided = {
		type = "function",
		args = "(element theElement, bool enable)",
		returns = "bool",
	},
	setElementFrozen = {
		type = "function",
		args = "(element theElement, bool freezeStatus)",
		returns = "bool",
	},
	setElementHealth = {
		type = "function",
		args = "(element theElement, float newHealth)",
		returns = "bool",
	},
	setElementID = {
		type = "function",
		args = "(element theElement, string name)",
		returns = "bool",
	},
	setElementInterior = {
		type = "function",
		args = "(element theElement, int interior [, float x, float y, float z])",
		returns = "bool",
	},
	setElementModel = {
		type = "function",
		args = "(element theElement, int model)",
		returns = "bool",
	},
	setElementParent = {
		type = "function",
		args = "(element theElement, element parent)",
		returns = "bool",
	},
	setElementPosition = {
		type = "function",
		args = "(element theElement, float x, float y, float z [, bool warp = true ])",
		returns = "bool",
	},
	setElementRotation = {
		type = "function",
		args = "(element theElement, float rotX, float rotY, float rotZ [, string rotOrder = 'default', bool conformPedRotation = false ])",
		returns = "bool",
	},
	setElementSyncer = {
		type = "function",
		args = "(element theElement, player thePlayer)",
		returns = "bool",
	},
	setElementVelocity = {
		type = "function",
		args = "(element theElement, float speedX, float speedY, float speedZ)",
		returns = "bool",
	},
	setElementVisibleTo = {
		type = "function",
		args = "(element theElement, element visibleTo, bool visible)",
		returns = "bool",
	},
	setLowLODElement = {
		type = "function",
		args = "(element theElement, element lowLODElement)",
		returns = "bool",
	},
	addEvent = {
		type = "function",
		args = "(string eventName [, bool allowRemoteTrigger = false ])",
		returns = "bool",
	},
	addEventHandler = {
		type = "function",
		args = "(string eventName, element attachedTo, function handlerFunction [, bool getPropagated = true, string priority = 'normal' ])",
		returns = "bool",
	},
	cancelEvent = {
		type = "function",
		args = "([ bool cancel = true, string reason = '' ])",
		returns = "bool",
	},
	cancelLatentEvent = {
		type = "function",
		args = "(player thePlayer, int handle)",
		returns = "bool",
	},
	getCancelReason = {
		type = "function",
		args = "()",
		returns = "string",
	},
	getEventHandlers = {
		type = "function",
		args = "(string eventName, element attachedTo)",
		returns = "table",
	},
	getLatentEventHandles = {
		type = "function",
		args = "player thePlayer)",
		returns = "table",
	},
	getLatentEventStatus = {
		type = "function",
		args = "(player thePlayer, int handle)",
		returns = "table",
	},
	removeEventHandler = {
		type = "function",
		args = "(string eventName, element attachedTo, function functionVar)",
		returns = "bool",
	},
	triggerEvent = {
		type = "function",
		args = "(string eventName, element baseElement, [ var argument1, ... ])",
		returns = "bool",
	},
	triggerClientEvent = {
		type = "function",
		args = "([table/element sendTo = getRootElement(), ] string name, element sourceElement [, arguments... ])",
		returns = "bool",
	},
	triggerLatentClientEvent = {
		type = "function",
		args = "([table/element sendTo = getRootElement(), ] string name, [int bandwidth = 50000,] [bool persist = false,] element theElement [, arguments... ])",
		returns = "bool",
	},
	wasEventCancelled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	createExplosion = {
		type = "function",
		args = "(float x, float y, float z, int theType [, player creator = nil ])",
		returns = "bool",
	},
	fileClose = {
		type = "function",
		args = "(file theFile)",
		returns = "bool",
	},
	fileCopy = {
		type = "function",
		args = "(string filePath, string copyToFilePath [, bool overwrite = false ])",
		returns = "bool",
	},
	fileCreate = {
		type = "function",
		args = "(string filePath)",
		returns = "file",
	},
	fileDelete = {
		type = "function",
		args = "(string filePath)",
		returns = "bool",
	},
	fileExists = {
		type = "function",
		args = "(string filePath)",
		returns = "bool",
	},
	fileFlush = {
		type = "function",
		args = "(file theFile)",
		returns = "bool",
	},
	fileGetPath = {
		type = "function",
		args = "(file theFile)",
		returns = "string",
	},
	fileGetPos = {
		type = "function",
		args = "(file theFile)",
		returns = "int",
	},
	fileGetSize = {
		type = "function",
		args = "(file theFile)",
		returns = "int",
	},
	fileIsEOF = {
		type = "function",
		args = "(file theFile)",
		returns = "bool",
	},
	fileOpen = {
		type = "function",
		args = "(string filePath [, bool readOnly = false ])",
		returns = "file",
	},
	fileRead = {
		type = "function",
		args = "(file theFile, int count)",
		returns = "string",
	},
	fileRename = {
		type = "function",
		args = "(string filePath, string newFilePath)",
		returns = "bool",
	},
	fileSetPos = {
		type = "function",
		args = "(file theFile, int offset)",
		returns = "int",
	},
	fileWrite = {
		type = "function",
		args = "(file theFile, string string1 [, string string2, string string3 ...])",
		returns = "int",
	},
	httpClear = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	httpRequestLogin = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	httpSetResponseCode = {
		type = "function",
		args = "(int code)",
		returns = "bool",
	},
	httpSetResponseCookie = {
		type = "function",
		args = "(string cookieName, string cookieValue)",
		returns = "bool",
	},
	httpSetResponseHeader = {
		type = "function",
		args = "(string headerName, string headerValue)",
		returns = "bool",
	},
	httpWrite = {
		type = "function",
		args = "(string data [, int length ])",
		returns = "bool",
	},
	bindKey = {
		type = "function",
		args = "(player thePlayer, string key, string keyState, function handlerFunction,  [ var arguments, ... ])",
		returns = "bool",
	},
	getControlState = {
		type = "function",
		args = "(player thePlayer, string controlName)",
		returns = "bool",
	},
	getFunctionsBoundToKey = {
		type = "function",
		args = "(player thePlayer, string key, string keyState)",
		returns = "table",
	},
	getKeyBoundToFunction = {
		type = "function",
		args = "(player thePlayer, function theFunction)",
		returns = "string",
	},
	isControlEnabled = {
		type = "function",
		args = "(player thePlayer, string control)",
		returns = "bool",
	},
	isKeyBound = {
		type = "function",
		args = "(player thePlayer, string key, [string keyState, function handler])",
		returns = "bool",
	},
	setControlState = {
		type = "function",
		args = "(player thePlayer, string control, bool state)",
		returns = "bool",
	},
	toggleAllControls = {
		type = "function",
		args = "(player thePlayer, bool enabled, [ bool gtaControls = true, bool mtaControls = true ])",
		returns = "bool",
	},
	toggleControl = {
		type = "function",
		args = "(player thePlayer, string control, bool enabled)",
		returns = "bool",
	},
	unbindKey = {
		type = "function",
		args = "(player thePlayer, string key [, string keyState, function handler ])",
		returns = "bool",
	},
	loadMapData = {
		type = "function",
		args = "(xmlnode node, element parent)",
		returns = "element",
	},
	resetMapInfo = {
		type = "function",
		args = "([ player thePlayer = getRootElement() ])",
		returns = "bool",
	},
	saveMapData = {
		type = "function",
		args = "(xmlnode node, element baseElement [, bool childrenOnly = false ])",
		returns = "bool",
	},
	createMarker = {
		type = "function",
		args = "(float x, float y, float z [, string theType = 'checkpoint', float size = 4.0, int r = 0, int g = 0, int b = 255, int a = 255, visibleTo = getRootElement( ) ])",
		returns = "marker",
	},
	getMarkerColor = {
		type = "function",
		args = "(marker theMarker)",
		returns = "4 ints",
	},
	getMarkerCount = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getMarkerIcon = {
		type = "function",
		args = "(marker theMarker)",
		returns = "string",
	},
	getMarkerSize = {
		type = "function",
		args = "(marker theMarker)",
		returns = "float",
	},
	getMarkerTarget = {
		type = "function",
		args = "(marker theMarker)",
		returns = "3 floats",
	},
	getMarkerType = {
		type = "function",
		args = "(marker theMarker)",
		returns = "string",
	},
	setMarkerColor = {
		type = "function",
		args = "(marker theMarker, int r, int g, int b, int a)",
		returns = "bool",
	},
	setMarkerIcon = {
		type = "function",
		args = "(marker theMarker, string icon)",
		returns = "bool",
	},
	setMarkerSize = {
		type = "function",
		args = "(marker theMarker, float size)",
		returns = "bool",
	},
	setMarkerTarget = {
		type = "function",
		args = "(marker theMarker, float x, float y, float z)",
		returns = "bool",
	},
	setMarkerType = {
		type = "function",
		args = "(marker theMarker, string markerType)",
		returns = "bool",
	},
	getLoadedModules = {
		type = "function",
		args = "()",
		returns = "table",
	},
	getModuleInfo = {
		type = "function",
		args = "(string moduleName)",
		returns = "table",
	},
	createObject = {
		type = "function",
		args = "(int modelid, float x, float y, float z, [ float rx, float ry, float rz, bool isLowLOD = false ])",
		returns = "object",
	},
	getObjectScale = {
		type = "function",
		args = "(object theObject)",
		returns = "3 floats",
	},
	moveObject = {
		type = "function",
		args = "(object theObject, int time, float targetx, float targety, float targetz, [ float moverx, float movery, float moverz, string strEasingType, float fEasingPeriod, float fEasingAmplitude, float fEasingOvershoot ])",
		returns = "bool",
	},
	setObjectScale = {
		type = "function",
		args = "(object theObject, float scale [, float scaleY = scale, float scaleZ = scale ])",
		returns = "bool",
	},
	stopObject = {
		type = "function",
		args = "(object theObject)",
		returns = "bool",
	},
	addPedClothes = {
		type = "function",
		args = "(ped thePed, string clothesTexture, string clothesModel, int clothesType)",
		returns = "bool",
	},
	createPed = {
		type = "function",
		args = "(int modelid, float x, float y, float z [, float rot = 0.0, bool synced = true ])",
		returns = "ped",
	},
	getPedAmmoInClip = {
		type = "function",
		args = "(ped thePed [, int weaponSlot = current ])",
		returns = "int",
	},
	getPedArmor = {
		type = "function",
		args = "(ped thePed)",
		returns = "float",
	},
	getPedClothes = {
		type = "function",
		args = "(ped thePed, int clothesType)",
		returns = "2 strings",
	},
	getPedContactElement = {
		type = "function",
		args = "(ped thePed)",
		returns = "element",
	},
	getPedFightingStyle = {
		type = "function",
		args = "(ped thePed)",
		returns = "int",
	},
	getPedGravity = {
		type = "function",
		args = "(ped thePed)",
		returns = "float",
	},
	getPedOccupiedVehicle = {
		type = "function",
		args = "(ped thePed)",
		returns = "vehicle",
	},
	getPedOccupiedVehicleSeat = {
		type = "function",
		args = "(ped thePed)",
		returns = "int",
	},
	getPedStat = {
		type = "function",
		args = "(ped thePed, int stat)",
		returns = "float",
	},
	getPedTarget = {
		type = "function",
		args = "(ped thePed)",
		returns = "element",
	},
	getPedTotalAmmo = {
		type = "function",
		args = "(ped thePed, [ int weaponSlot = current ])",
		returns = "int",
	},
	getPedWalkingStyle = {
		type = "function",
		args = "(ped thePed)",
		returns = "int",
	},
	getPedWeapon = {
		type = "function",
		args = "(ped thePed [, int weaponSlot = current ])",
		returns = "int",
	},
	getPedWeaponSlot = {
		type = "function",
		args = "(ped thePed)",
		returns = "int",
	},
	getValidPedModels = {
		type = "function",
		args = "()",
		returns = "table",
	},
	isPedChoking = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	isPedDead = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	isPedDoingGangDriveby = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	isPedDucked = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	isPedHeadless = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	isPedInVehicle = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	isPedOnFire = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	isPedOnGround = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	isPedWearingJetpack = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	setPedWearingJetpack = {
		type = "function",
		args = "(ped thePed, bool state)",
		returns = "bool",
	},
	killPed = {
		type = "function",
		args = "(ped thePed, [ ped theKiller = nil, int weapon = 255, int bodyPart = 255, bool stealth = false ])",
		returns = "bool",
	},
	reloadPedWeapon = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	removePedClothes = {
		type = "function",
		args = "(ped thePed, int clothesType, [ string clothesTexture, string clothesModel ])",
		returns = "bool",
	},
	removePedFromVehicle = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	setPedAnimation = {
		type = "function",
		args = "(ped thePed [, string block = nil, string anim = nil, int time = -1, bool loop = true, bool updatePosition = true, bool interruptable = true, bool freezeLastFrame = true, int blendTime = 250])",
		returns = "bool",
	},
	setPedAnimationProgress = {
		type = "function",
		args = "(ped thePed [, string anim, float progress ])",
		returns = "bool",
	},
	setPedArmor = {
		type = "function",
		args = "(ped thePed, float armor)",
		returns = "bool",
	},
	setPedChoking = {
		type = "function",
		args = "(ped thePed, bool choking)",
		returns = "bool",
	},
	setPedDoingGangDriveby = {
		type = "function",
		args = "(ped thePed, bool state)",
		returns = "bool",
	},
	setPedFightingStyle = {
		type = "function",
		args = "(ped thePed, int style)",
		returns = "bool",
	},
	setPedGravity = {
		type = "function",
		args = "(ped thePed, float gravity)",
		returns = "bool",
	},
	setPedHeadless = {
		type = "function",
		args = "(ped thePed, bool headState)",
		returns = "bool",
	},
	setPedOnFire = {
		type = "function",
		args = "(ped thePed, bool isOnFire)",
		returns = "bool",
	},
	setPedStat = {
		type = "function",
		args = "(ped thePed, int stat, float value)",
		returns = "bool",
	},
	setPedWalkingStyle = {
		type = "function",
		args = "(ped thePed, int style)",
		returns = "bool",
	},
	setPedWeaponSlot = {
		type = "function",
		args = "(ped thePed, int weaponSlot)",
		returns = "bool",
	},
	warpPedIntoVehicle = {
		type = "function",
		args = "(ped thePed, vehicle theVehicle, [ int seat = 0 ])",
		returns = "bool",
	},
	createPickup = {
		type = "function",
		args = "(float x, float y, float z, int theType, int amount/weapon/model, [ int respawnTime = 30000, int ammo = 50 ])",
		returns = "pickup",
	},
	getPickupAmmo = {
		type = "function",
		args = "(pickup thePickup)",
		returns = "int",
	},
	getPickupAmount = {
		type = "function",
		args = "(pickup thePickup)",
		returns = "int",
	},
	getPickupRespawnInterval = {
		type = "function",
		args = "(pickup thePickup)",
		returns = "int",
	},
	getPickupType = {
		type = "function",
		args = "(pickup thePickup)",
		returns = "int",
	},
	getPickupWeapon = {
		type = "function",
		args = "(pickup thePickup)",
		returns = "int",
	},
	isPickupSpawned = {
		type = "function",
		args = "(pickup thePickup)",
		returns = "bool",
	},
	setPickupRespawnInterval = {
		type = "function",
		args = "(pickup thePickup, int ms)",
		returns = "bool",
	},
	setPickupType = {
		type = "function",
		args = "(pickup thePickup, int theType, int amount/weapon/model, [ int ammo ])",
		returns = "bool",
	},
	usePickup = {
		type = "function",
		args = "(pickup thePickup, player thePlayer)",
		returns = "bool",
	},
	forcePlayerMap = {
		type = "function",
		args = "(player thePlayer, bool forceOn)",
		returns = "bool",
	},
	getAlivePlayers = {
		type = "function",
		args = "()",
		returns = "table",
	},
	getDeadPlayers = {
		type = "function",
		args = "()",
		returns = "table",
	},
	getPlayerAnnounceValue = {
		type = "function",
		args = "(element thePlayer, string key)",
		returns = "string",
	},
	getPlayerBlurLevel = {
		type = "function",
		args = "(player thePlayer)",
		returns = "int",
	},
	getPlayerCount = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getPlayerFromName = {
		type = "function",
		args = "(string playerName)",
		returns = "player",
	},
	getPlayerIdleTime = {
		type = "function",
		args = "(player thePlayer)",
		returns = "int",
	},
	getPlayerIP = {
		type = "function",
		args = "(player thePlayer)",
		returns = "string",
	},
	getPlayerMoney = {
		type = "function",
		args = "(player thePlayer)",
		returns = "int/bool",
	},
	getPlayerName = {
		type = "function",
		args = "(player thePlayer)",
		returns = "string",
	},
	getPlayerNametagColor = {
		type = "function",
		args = "(player thePlayer)",
		returns = "3 ints",
	},
	getPlayerNametagText = {
		type = "function",
		args = "(player thePlayer)",
		returns = "string",
	},
	getPlayerPing = {
		type = "function",
		args = "(player thePlayer)",
		returns = "int",
	},
	getPlayerSerial = {
		type = "function",
		args = "(player thePlayer)",
		returns = "string",
	},
	getPlayerTeam = {
		type = "function",
		args = "(player thePlayer)",
		returns = "team",
	},
	getPlayerVersion = {
		type = "function",
		args = "(player thePlayer)",
		returns = "string",
	},
	getPlayerWantedLevel = {
		type = "function",
		args = "(player thePlayer)",
		returns = "int",
	},
	getRandomPlayer = {
		type = "function",
		args = "()",
		returns = "player",
	},
	givePlayerMoney = {
		type = "function",
		args = "(player thePlayer, int amount)",
		returns = "bool",
	},
	isPlayerMapForced = {
		type = "function",
		args = "(player thePlayer)",
		returns = "bool",
	},
	isPlayerMuted = {
		type = "function",
		args = "(player thePlayer)",
		returns = "bool",
	},
	isPlayerNametagShowing = {
		type = "function",
		args = "(player thePlayer)",
		returns = "bool",
	},
	isVoiceEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	redirectPlayer = {
		type = "function",
		args = "(player thePlayer, [ string serverIP = '', int serverPort = 0, string serverPassword = '' ])",
		returns = "bool",
	},
	resendPlayerACInfo = {
		type = "function",
		args = "(player thePlayer)",
		returns = "bool",
	},
	resendPlayerModInfo = {
		type = "function",
		args = "(player thePlayer)",
		returns = "bool",
	},
	setPlayerAnnounceValue = {
		type = "function",
		args = "(element thePlayer, string key, string value)",
		returns = "bool",
	},
	setPlayerBlurLevel = {
		type = "function",
		args = "(player thePlayer, int level)",
		returns = "bool",
	},
	setPlayerHudComponentVisible = {
		type = "function",
		args = "(player thePlayer, string component, bool show)",
		returns = "bool",
	},
	setPlayerMoney = {
		type = "function",
		args = "(player thePlayer, int amount [, bool instant = false ])",
		returns = "bool",
	},
	setPlayerMuted = {
		type = "function",
		args = "(player thePlayer, bool state)",
		returns = "bool",
	},
	setPlayerName = {
		type = "function",
		args = "(player thePlayer, string newName)",
		returns = "bool",
	},
	setPlayerNametagColor = {
		type = "function",
		args = "(player thePlayer, int r, int g, int b)",
		returns = "bool",
	},
	setPlayerNametagShowing = {
		type = "function",
		args = "(player thePlayer, bool showing)",
		returns = "bool",
	},
	setPlayerNametagText = {
		type = "function",
		args = "(player thePlayer, string text)",
		returns = "bool",
	},
	setPlayerTeam = {
		type = "function",
		args = "(player thePlayer, team theTeam)",
		returns = "bool",
	},
	setPlayerVoiceBroadcastTo = {
		type = "function",
		args = "(element thePlayer, mixed broadcastTo)",
		returns = "bool",
	},
	setPlayerVoiceIgnoreFrom = {
		type = "function",
		args = "(element thePlayer, mixed ignoreFrom)",
		returns = "bool",
	},
	setPlayerWantedLevel = {
		type = "function",
		args = "(player thePlayer, int stars)",
		returns = "bool",
	},
	spawnPlayer = {
		type = "function",
		args = "(player thePlayer, float x, float y, float z, [ int rotation = 0, int skinID = 0, int interior = 0, int dimension = 0, team theTeam = getPlayerTeam(thePlayer) ])",
		returns = "bool",
	},
	takePlayerMoney = {
		type = "function",
		args = "(player thePlayer, int amount)",
		returns = "bool",
	},
	takePlayerScreenShot = {
		type = "function",
		args = "(player thePlayer, int width, int height [, string tag = '', int quality = 30, int maxBandwith = 5000 ])",
		returns = "bool",
	},
	detonateSatchels = {
		type = "function",
		args = "(player thePlayer)",
		returns = "bool",
	},
	createRadarArea = {
		type = "function",
		args = "(float startPosX, float startPosY, float sizeX, float sizeY, [ int r = 255, int g = 0, int b = 0, int a = 255, element visibleTo = getRootElement()])",
		returns = "radararea",
	},
	getRadarAreaColor = {
		type = "function",
		args = "(radararea theRadararea)",
		returns = "4 ints",
	},
	getRadarAreaSize = {
		type = "function",
		args = "(radararea theRadararea)",
		returns = "2 floats",
	},
	isInsideRadarArea = {
		type = "function",
		args = "(radararea theArea, float posX, float posY)",
		returns = "bool",
	},
	isRadarAreaFlashing = {
		type = "function",
		args = "(radararea theRadararea)",
		returns = "bool",
	},
	setRadarAreaColor = {
		type = "function",
		args = "(radararea theRadarArea, int r, int g, int b, int a)",
		returns = "bool",
	},
	setRadarAreaFlashing = {
		type = "function",
		args = "(radararea theRadarArea, bool flash)",
		returns = "bool",
	},
	setRadarAreaSize = {
		type = "function",
		args = "(radararea theRadararea, float x, float y)",
		returns = "bool",
	},
	addResourceConfig = {
		type = "function",
		args = "(string filePath, [ string filetype = 'server' ])",
		returns = "xmlnode",
	},
	addResourceMap = {
		type = "function",
		args = "(string filePath, [ int dimension = 0 ])",
		returns = "xmlnode",
	},
	callRemote = {
		type = "function",
		args = "(string host [, string queueName = 'default' ][, int connectionAttempts = 10, int connectTimeout = 10000 ], string resourceName, string functionName, callback callbackFunction, [ arguments... ])",
		returns = "bool",
	},
	callRemote = {
		type = "function",
		args = "(string URL [, string queueName = 'default' ][, int connectionAttempts = 10, int connectTimeout = 10000 ], callback callbackFunction, [ arguments... ])",
		returns = "bool",
	},
	copyResource = {
		type = "function",
		args = "(resource theResource, string newResourceName [, string organizationalDir ])",
		returns = "resource",
	},
	createResource = {
		type = "function",
		args = "(string resourceName [, string organizationalDir ])",
		returns = "resource",
	},
	deleteResource = {
		type = "function",
		args = "(string resourceName)",
		returns = "bool",
	},
	fetchRemote = {
		type = "function",
		args = "(string URL [, string queueName = 'default' ][, int connectionAttempts = 10, int connectTimeout = 10000 ], function callbackFunction, [ string postData = '', bool postIsBinary = false, [ arguments... ]])",
		returns = "bool",
	},
	getResourceACLRequests = {
		type = "function",
		args = "(resource theResource)",
		returns = "table",
	},
	getResourceConfig = {
		type = "function",
		args = "(string filePath)",
		returns = "xmlnode",
	},
	getResourceDynamicElementRoot = {
		type = "function",
		args = "(resource theResource)",
		returns = "element",
	},
	getResourceExportedFunctions = {
		type = "function",
		args = "([resource theResource = getThisResource()])",
		returns = "table",
	},
	getResourceFromName = {
		type = "function",
		args = "(string resourceName)",
		returns = "resource",
	},
	getResourceInfo = {
		type = "function",
		args = "(resource theResource, string attribute)",
		returns = "string",
	},
	getResourceLastStartTime = {
		type = "function",
		args = "(resource theResource)",
		returns = "int",
	},
	getResourceLoadFailureReason = {
		type = "function",
		args = "(resource theResource)",
		returns = "string",
	},
	getResourceLoadTime = {
		type = "function",
		args = "(resource theResource)",
		returns = "int",
	},
	getResourceMapRootElement = {
		type = "function",
		args = "(resource theResource, string mapName)",
		returns = "element",
	},
	getResourceName = {
		type = "function",
		args = "(resource theResource)",
		returns = "string",
	},
	getResourceOrganizationalPath = {
		type = "function",
		args = "(resource theResource)",
		returns = "string",
	},
	getResourceRootElement = {
		type = "function",
		args = "([resource theResource=getThisResource()])",
		returns = "element",
	},
	getResourceState = {
		type = "function",
		args = "(resource theResource)",
		returns = "string",
	},
	getResources = {
		type = "function",
		args = "()",
		returns = "table",
	},
	getThisResource = {
		type = "function",
		args = "()",
		returns = "resource",
	},
	isResourceArchived = {
		type = "function",
		args = "(resource theResource)",
		returns = "bool",
	},
	refreshResources = {
		type = "function",
		args = "([bool refreshAll = false, resource targetResource = nil])",
		returns = "bool",
	},
	removeResourceFile = {
		type = "function",
		args = "(resource theResource, string fileName)",
		returns = "bool",
	},
	renameResource = {
		type = "function",
		args = "(string resourceName, string newResourceName, [ string organizationalPath ])",
		returns = "bool",
	},
	restartResource = {
		type = "function",
		args = "(resource theResource [, bool persistent = false, bool configs = true, bool maps = true, bool scripts = true, bool html = true, bool clientConfigs = true, bool clientScripts = true, bool clientFiles = true ])",
		returns = "bool",
	},
	setResourceInfo = {
		type = "function",
		args = "(resource theResource, string attribute, string value)",
		returns = "bool",
	},
	startResource = {
		type = "function",
		args = "(resource resourceToStart, [bool persistent = false, bool startIncludedResources = true, bool loadServerConfigs = true, bool loadMaps = true, bool loadServerScripts = true, bool loadHTML = true, bool loadClientConfigs = true, bool loadClientScripts = true, bool loadFiles = true])",
		returns = "bool",
	},
	stopResource = {
		type = "function",
		args = "(resource theResource)",
		returns = "bool",
	},
	updateResourceACLRequest = {
		type = "function",
		args = "(resource theResource, string rightName, bool access [, string byWho = '' ])",
		returns = "bool",
	},
	addCommandHandler = {
		type = "function",
		args = "(string commandName, function handlerFunction [, bool restricted = false, bool caseSensitive = true])",
		returns = "bool",
	},
	clearChatBox = {
		type = "function",
		args = "([element clearFor = getRootElement()])",
		returns = "bool",
	},
	executeCommandHandler = {
		type = "function",
		args = "(string commandName, player thePlayer, [ string args ])",
		returns = "bool",
	},
	getCommandHandlers = {
		type = "function",
		args = "([resource theResource])",
		returns = "table",
	},
	getFPSLimit = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getMaxPlayers = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getServerHttpPort = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getServerName = {
		type = "function",
		args = "()",
		returns = "string",
	},
	getServerPassword = {
		type = "function",
		args = "()",
		returns = "string",
	},
	getServerPort = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getVersion = {
		type = "function",
		args = "()",
		returns = "table",
	},
	isGlitchEnabled = {
		type = "function",
		args = "(string glitchName)",
		returns = "bool",
	},
	outputChatBox = {
		type = "function",
		args = "(string text [, element visibleTo = getRootElement(), int r = 231, int g = 217, int b = 176, bool colorCoded = false])",
		returns = "bool",
	},
	outputConsole = {
		type = "function",
		args = "(string text [, element visibleTo = getRootElement()])",
		returns = "bool",
	},
	outputDebugString = {
		type = "function",
		args = "(string text [, int level = 3, int red = 255, int green = 255, int blue = 255])",
		returns = "bool",
	},
	outputServerLog = {
		type = "function",
		args = "(string text)",
		returns = "bool",
	},
	removeCommandHandler = {
		type = "function",
		args = "(string commandName [, function handler ])",
		returns = "bool",
	},
	setFPSLimit = {
		type = "function",
		args = "(int fpsLimit)",
		returns = "bool",
	},
	setGlitchEnabled = {
		type = "function",
		args = "(string glitchName, bool enable)",
		returns = "bool",
	},
	setMaxPlayers = {
		type = "function",
		args = "(int slots)",
		returns = "bool",
	},
	setServerPassword = {
		type = "function",
		args = "(string thePassword)",
		returns = "bool",
	},
	showChat = {
		type = "function",
		args = "(player thePlayer, bool show)",
		returns = "bool",
	},
	shutdown = {
		type = "function",
		args = "(string reason)",
		returns = "bool",
	},
	get = {
		type = "function",
		args = "(string settingNam)",
		returns = "var",
	},
	set = {
		type = "function",
		args = "(string settingName, var value)",
		returns = "bool",
	},
	executeSQLQuery = {
		type = "function",
		args = "(string query [, var param1 [, var param2 ... ]])",
		returns = "table",
	},
	dbConnect = {
		type = "function",
		args = "(string databaseType, string host [, string username = '', string password = '', string options = ''])",
		returns = "element",
	},
	dbExec = {
		type = "function",
		args = "(element databaseConnection, string query [, var param1 [, var param2 ...]])",
		returns = "bool",
	},
	dbFree = {
		type = "function",
		args = "(handle queryHandle)",
		returns = "bool",
	},
	dbPoll = {
		type = "function",
		args = "(handle queryHandle, int timeout [, bool multipleResults = false ])",
		returns = "table",
	},
	dbPrepareString = {
		type = "function",
		args = "(element databaseConnection, string query [, var param1 [, var param2 ...]])",
		returns = "string",
	},
	dbQuery = {
		type = "function",
		args = "([function callbackFunction, [ table callbackArguments, ] ] element databaseConnection, string query [, var param1 [, var param2 ...]])",
		returns = "handle",
	},
	countPlayersInTeam = {
		type = "function",
		args = "(team theTeam)",
		returns = "int",
	},
	createTeam = {
		type = "function",
		args = "(string teamName [, int colorR = 255, int colorG = 255, int colorB = 255 ])",
		returns = "team",
	},
	getPlayerTeam = {
		type = "function",
		args = "(player thePlayer)",
		returns = "team",
	},
	getPlayersInTeam = {
		type = "function",
		args = "(team theTeam)",
		returns = "table",
	},
	getTeamColor = {
		type = "function",
		args = "(team theTeam)",
		returns = "3 ints",
	},
	getTeamFriendlyFire = {
		type = "function",
		args = "(team theTeam)",
		returns = "bool",
	},
	getTeamFromName = {
		type = "function",
		args = "(string teamName)",
		returns = "team",
	},
	getTeamName = {
		type = "function",
		args = "(team theTeam)",
		returns = "string",
	},
	setPlayerTeam = {
		type = "function",
		args = "(player thePlayer, team theTeam)",
		returns = "bool",
	},
	setTeamColor = {
		type = "function",
		args = "(team theTeam, int colorR, int colorG, int colorB)",
		returns = "bool",
	},
	setTeamFriendlyFire = {
		type = "function",
		args = "(team theTeam, bool friendlyFire)",
		returns = "bool",
	},
	setTeamName = {
		type = "function",
		args = "(team theTeam, string newName)",
		returns = "bool",
	},
	textCreateDisplay = {
		type = "function",
		args = "()",
		returns = "textdisplay",
	},
	textCreateTextItem = {
		type = "function",
		args = "(string text, float x, float y, [string priority, int red = 255, int green = 255, int blue = 255, int alpha = 255, float scale = 1, string alignX = 'left', string alignY = 'top', int shadowAlpha = 0])",
		returns = "textitem",
	},
	textDestroyDisplay = {
		type = "function",
		args = "(textdisplay display)",
		returns = "bool",
	},
	textDestroyTextItem = {
		type = "function",
		args = "(textitem theTextitem)",
		returns = "void",
	},
	textDisplayAddObserver = {
		type = "function",
		args = "(textdisplay display, player playerToAdd)",
		returns = "void",
	},
	textDisplayAddText = {
		type = "function",
		args = "(textdisplay displayToAddTo, textitem itemToAdd)",
		returns = "void",
	},
	textDisplayGetObservers = {
		type = "function",
		args = "(textdisplay theDisplay)",
		returns = "table",
	},
	textDisplayIsObserver = {
		type = "function",
		args = "(textdisplay display, player thePlayer)",
		returns = "bool",
	},
	textDisplayRemoveObserver = {
		type = "function",
		args = "(textdisplay display, player playerToRemove)",
		returns = "bool",
	},
	textDisplayRemoveText = {
		type = "function",
		args = "(textdisplay displayToRemoveFrom, textitem itemToRemove)",
		returns = "void",
	},
	textItemGetColor = {
		type = "function",
		args = "(textitem theTextitem)",
		returns = "4 ints",
	},
	textItemGetPosition = {
		type = "function",
		args = "(textitem theTextItem)",
		returns = "2 floats",
	},
	textItemGetPriority = {
		type = "function",
		args = "(textitem textitemToCheck)",
		returns = "int",
	},
	textItemGetScale = {
		type = "function",
		args = "(textitem theTextitem)",
		returns = "float",
	},
	textItemGetText = {
		type = "function",
		args = "(textitem theTextitem)",
		returns = "string",
	},
	textItemSetColor = {
		type = "function",
		args = "(textitem theTextItem, int r, int g, int b, int a)",
		returns = "bool",
	},
	textItemSetPosition = {
		type = "function",
		args = "(textitem theTextItem, float x, float y)",
		returns = "bool",
	},
	textItemSetPriority = {
		type = "function",
		args = "(textitem theTextItem, string priority)",
		returns = "void",
	},
	textItemSetScale = {
		type = "function",
		args = "(textitem theTextitem, float scale)",
		returns = "bool",
	},
	textItemSetText = {
		type = "function",
		args = "(textitem theTextitem, string text)",
		returns = "void",
	},
	addDebugHook = {
		type = "function",
		args = "(string hookType, function callbackFunction [, table nameList])",
		returns = "bool",
	},
	base64Decode = {
		type = "function",
		args = "(string data)",
		returns = "string",
	},
	base64Encode = {
		type = "function",
		args = "(string data)",
		returns = "string",
	},
	bitAnd = {
		type = "function",
		args = "(uint var1, uint var2, ...)",
		returns = "uint",
	},
	bitNot = {
		type = "function",
		args = "(uint var)",
		returns = "uint",
	},
	bitOr = {
		type = "function",
		args = "(uint var1, uint var2, ...)",
		returns = "uint",
	},
	bitXor = {
		type = "function",
		args = "(uint var1, uint var2, ...)",
		returns = "uint",
	},
	bitTest = {
		type = "function",
		args = "(uint var1, uint var2, ...)",
		returns = "bool",
	},
	bitLRotate = {
		type = "function",
		args = "(int value, int n)",
		returns = "int",
	},
	bitRRotate = {
		type = "function",
		args = "(int value, int n)",
		returns = "int",
	},
	bitLShift = {
		type = "function",
		args = "(int value, int n)",
		returns = "int",
	},
	bitRShift = {
		type = "function",
		args = "(int value, int n)",
		returns = "int",
	},
	bitArShift = {
		type = "function",
		args = "(int value, int n)",
		returns = "int",
	},
	bitExtract = {
		type = "function",
		args = "(uint var, int field [, int width = 1 ])",
		returns = "uint",
	},
	bitReplace = {
		type = "function",
		args = "(uint var, uint replaceValue, int field, int width = 1)",
		returns = "uint",
	},
	debugSleep = {
		type = "function",
		args = "(int sleep)",
		returns = "bool",
	},
	decodeString = {
		type = "function",
		args = "(string algorithm, string input, table options)",
		returns = "string",
	},
	encodeString = {
		type = "function",
		args = "(string algorithm, string input, table options)",
		returns = "string",
	},
	fromJSON = {
		type = "function",
		args = "(string json)",
		returns = "var",
	},
	getColorFromString = {
		type = "function",
		args = "(string theColor)",
		returns = "4 ints",
	},
	getDevelopmentMode = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	getDistanceBetweenPoints2D = {
		type = "function",
		args = "(float x1, float y1, float x2, float y2)",
		returns = "float",
	},
	getDistanceBetweenPoints3D = {
		type = "function",
		args = "(float x1, float y1, float z1, float x2, float y2, float z2)",
		returns = "float",
	},
	getEasingValue = {
		type = "function",
		args = "(float fProgress, string strEasingType [, float fEasingPeriod, float fEasingAmplitude, float fEasingOvershoot])",
		returns = "float",
	},
	getNetworkStats = {
		type = "function",
		args = "([element thePlayer = nil])",
		returns = "table",
	},
	getNetworkUsageData = {
		type = "function",
		args = "()",
		returns = "table",
	},
	getPerformanceStats = {
		type = "function",
		args = "(string category [, string options = '', string filter = ''])",
		returns = "2 tables",
	},
	getRealTime = {
		type = "function",
		args = "([int seconds = current, bool localTime = true])",
		returns = "table",
	},
	getServerConfigSetting = {
		type = "function",
		args = "(string name)",
		returns = "string",
	},
	getTickCount = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getTimerDetails = {
		type = "function",
		args = "(timer theTimer)",
		returns = "3 ints",
	},
	getTimers = {
		type = "function",
		args = "([theTime = nil])",
		returns = "table",
	},
	gettok = {
		type = "function",
		args = "(string text, int tokenNumber, string / int separatingCharacter)",
		returns = "string",
	},
	getUserdataType = {
		type = "function",
		args = "(userdata value)",
		returns = "string",
	},
	hash = {
		type = "function",
		args = "(string algorithm, string dataToHash)",
		returns = "string",
	},
	inspect = {
		type = "function",
		args = "(mixed var [, table options])",
		returns = "string",
	},
	interpolateBetween = {
		type = "function",
		args = "(float x1, float y1, float z1, float x2, float y2, float z2, float fProgress, string strEasingType, [ float fEasingPeriod, float fEasingAmplitude, float fEasingOvershoot])",
		returns = "3 floats",
	},
	iprint = {
		type = "function",
		args = "(mixed var1[, mixed var2, mixed var3...])",
		returns = "bool",
	},
	isOOPEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	isTimer = {
		type = "function",
		args = "(timer theTimer)",
		returns = "bool",
	},
	killTimer = {
		type = "function",
		args = "(timer theTimer)",
		returns = "bool",
	},
	md5 = {
		type = "function",
		args = "(string str)",
		returns = "string",
	},
	passwordHash = {
		type = "function",
		args = "(string password, string algorithm, table options [, function callback])",
		returns = "string",
	},
	passwordVerify = {
		type = "function",
		args = "(string password, string hash[, table options, function callback])",
		returns = "bool",
	},
	pregFind = {
		type = "function",
		args = "(string subject, string pattern [, int/string flags])",
		returns = "bool",
	},
	pregMatch = {
		type = "function",
		args = "(string base, string pattern [, int/string flags = 0, int maxResults = 100000 ])",
		returns = "table",
	},
	pregReplace = {
		type = "function",
		args = "(string subject, string pattern, string replacement [, int/string flags ])",
		returns = "string",
	},
	removeDebugHook = {
		type = "function",
		args = "(string hookType, function callbackFunction)",
		returns = "bool",
	},
	resetTimer = {
		type = "function",
		args = "(timer theTimer)",
		returns = "bool",
	},
	setDevelopmentMode = {
		type = "function",
		args = "(bool enable, [bool enableWeb = false])",
		returns = "bool",
	},
	setFPSLimit = {
		type = "function",
		args = "(int fpsLimit)",
		returns = "bool",
	},
	setServerConfigSetting = {
		type = "function",
		args = "(string name, string value, [ bool bSave = false ])",
		returns = "bool",
	},
	setTimer = {
		type = "function",
		args = "(function theFunction, int timeInterval, int timesToExecute, [ var arguments... ])",
		returns = "timer",
	},
	sha256 = {
		type = "function",
		args = "(string str)",
		returns = "string",
	},
	split = {
		type = "function",
		args = "(string stringToSplit, string / int separatingChar)",
		returns = "table",
	},
	teaDecode = {
		type = "function",
		args = "(string data, string key)",
		returns = "string",
	},
	teaEncode = {
		type = "function",
		args = "(teaEncode)",
		returns = "string",
	},
	tocolor = {
		type = "function",
		args = "(int red, int green, int blue [, int alpha = 255 ])",
		returns = "int",
	},
	toJSON = {
		type = "function",
		args = "(var value, [ bool compact = false ][, string prettyType = 'none'])",
		returns = "string",
	},
	utfChar = {
		type = "function",
		args = "(int characterCode)",
		returns = "string",
	},
	utfCode = {
		type = "function",
		args = "(string theString)",
		returns = "int",
	},
	utfLen = {
		type = "function",
		args = "(string theString)",
		returns = "int",
	},
	utfSeek = {
		type = "function",
		args = "(string theString, int position)",
		returns = "int",
	},
	utfSub = {
		type = "function",
		args = "(string theString, int start, int end)",
		returns = "string",
	},
	utf8 = {
		type = "class",
		childs = {
			byte = {
				type = "function",
				args = "(string input [, int i = 1, int j = 1 ])",
				returns = "int",
			},
			char = {
				type = "function",
				args = "([int codepoints...])",
				returns = "string",
			},
			charpos = {
				type = "function",
				args = "(string input [[, int charpos = 0 ], int offset = 1])",
				returns = "2 ints",
			},
			escape = {
				type = "function",
				args = "(string input)",
				returns = "string",
			},
			find = {
				type = "function",
				args = "(string input, string pattern [, int startpos = 1, boolean plain = false])",
				returns = "string",
			},
			fold = {
				type = "function",
				args = "(string|int input)",
				returns = "string|int",
			},
			gmatch = {
				type = "function",
				args = "(string input, string pattern)",
				returns = "iterator",
			},
			gsub = {
				type = "function",
				args = "(string input, string pattern, mixed replace [, int match_limit = len(input)])",
				returns = "string",
			},
			insert = {
				type = "function",
				args = "(string input [, int insert_pos = len( input ) + 1 ], string substring)",
				returns = "string",
			},
			len = {
				type = "function",
				args = "(string input [, int i = 1, int j = len(input)])",
				returns = "int",
			},
			lower = {
				type = "function",
				args = "(string|int input)",
				returns = "string|int",
			},
			match = {
				type = "function",
				args = "(string input, string pattern [, int index = 1])",
				returns = "string",
			},
			ncasecmp = {
				type = "function",
				args = "(string a, string b)",
				returns = "int",
			},
			next = {
				type = "function",
				args = "(string input [[, int charpos = 0 ], int offset = 1 ])",
				returns = "2 ints",
			},
			remove = {
				type = "function",
				args = "(string input, int start = 1 [, int stop = -1])",
				returns = "string",
			},
			reverse = {
				type = "function",
				args = "(string input)",
				returns = "string",
			},
			sub = {
				type = "function",
				args = "(string input [, int i = 1, int j = len(input)])",
				returns = "string",
			},
			title = {
				type = "function",
				args = "(string|int input)",
				returns = "string",
			},
			upper = {
				type = "function",
				args = "(string|int input)",
				returns = "string",
			},
			width = {
				type = "function",
				args = "(string|int input [, bool ambi_is_double = false, int default_width = 0])",
				returns = "int",
			},
			widthindex = {
				type = "function",
				args = "(string input, int location [, bool ambi_is_double = false, int default_width = 0])",
				returns = "3 ints",
			},
		},
	},
	addVehicleSirens = {
		type = "function",
		args = "(vehicle theVehicle, int sirenCount, int sirenType, [bool 360flag = false, bool checkLosFlag = true, bool useRandomiser flag = true, bool silentFlag = false)",
		returns = "bool",
	},
	addVehicleUpgrade = {
		type = "function",
		args = "(vehicle theVehicle, int upgrade)",
		returns = "bool",
	},
	attachTrailerToVehicle = {
		type = "function",
		args = "(vehicle theVehicle, vehicle theTrailer)",
		returns = "bool",
	},
	blowVehicle = {
		type = "function",
		args = "(vehicle vehicleToBlow [, bool explode = true])",
		returns = "bool",
	},
	createVehicle = {
		type = "function",
		args = "(int model, float x, float y, float z [, float rx, float ry, float rz, string numberplate, bool bDirection, int variant1, int variant2])",
		returns = "vehicle",
	},
	detachTrailerFromVehicle = {
		type = "function",
		args = "(vehicle theVehicle [, vehicle theTrailer = nil])",
		returns = "bool",
	},
	fixVehicle = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	getModelHandling = {
		type = "function",
		args = "(int modelId)",
		returns = "table",
	},
	getOriginalHandling = {
		type = "function",
		args = "(int modelId)",
		returns = "table",
	},
	getTrainDirection = {
		type = "function",
		args = "(vehicle train)",
		returns = "bool",
	},
	getTrainPosition = {
		type = "function",
		args = "(vehicle train)",
		returns = "float",
	},
	getTrainSpeed = {
		type = "function",
		args = "(vehicle train)",
		returns = "float",
	},
	getTrainTrack = {
		type = "function",
		args = "(vehicle train)",
		returns = "int",
	},
	getVehicleColor = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "4 ints",
	},
	getVehicleCompatibleUpgrades = {
		type = "function",
		args = "(vehicle theVehicle [, int slot])",
		returns = "table",
	},
	getVehicleController = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "player",
	},
	getVehicleDoorOpenRatio = {
		type = "function",
		args = "(vehicle theVehicle, int door)",
		returns = "float",
	},
	getVehicleDoorState = {
		type = "function",
		args = "(vehicle theVehicle, int door)",
		returns = "int",
	},
	getVehicleEngineState = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	getVehicleHandling = {
		type = "function",
		args = "(element theVehicle)",
		returns = "table",
	},
	getVehicleHeadLightColor = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "3 ints",
	},
	getVehicleLandingGearDown = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	getVehicleLightState = {
		type = "function",
		args = "(vehicle theVehicle, int light)",
		returns = "int",
	},
	getVehicleMaxPassengers = {
		type = "function",
		args = "(vehicle theVehicle / int modelID)",
		returns = "int",
	},
	getVehicleModelFromName = {
		type = "function",
		args = "(string name)",
		returns = "int",
	},
	getVehicleName = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "string",
	},
	getVehicleNameFromModel = {
		type = "function",
		args = "(int model)",
		returns = "string",
	},
	getVehicleOccupant = {
		type = "function",
		args = "(vehicle theVehicle [, int seat = 0])",
		returns = "player",
	},
	getVehicleOccupants = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "table",
	},
	getVehicleOverrideLights = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "int",
	},
	getVehiclePaintjob = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "int",
	},
	getVehiclePanelState = {
		type = "function",
		args = "(vehicle theVehicle, int panel)",
		returns = "int",
	},
	getVehiclePlateText = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "string",
	},
	getVehicleRespawnPosition = {
		type = "function",
		args = "(element theVehicle)",
		returns = "3 floats",
	},
	getVehicleRespawnRotation = {
		type = "function",
		args = "(element theVehicle)",
		returns = "3 floats",
	},
	getVehicleSirenParams = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "table",
	},
	getVehicleSirens = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "table",
	},
	getVehicleSirensOn = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	getVehicleTowedByVehicle = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "vehicle",
	},
	getVehicleTowingVehicle = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "vehicle",
	},
	getVehicleTurretPosition = {
		type = "function",
		args = "(vehicle turretVehicle)",
		returns = "2 floats",
	},
	getVehicleType = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "string",
	},
	getVehicleType = {
		type = "function",
		args = "(int modelId)",
		returns = "string",
	},
	getVehicleUpgradeOnSlot = {
		type = "function",
		args = "(vehicle theVehicle, int slot)",
		returns = "int",
	},
	getVehicleUpgradeSlotName = {
		type = "function",
		args = "(int slot/upgrade)",
		returns = "string",
	},
	getVehicleUpgrades = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "table",
	},
	getVehicleVariant = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "2 ints",
	},
	getVehicleWheelStates = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "4 ints",
	},
	getVehiclesOfType = {
		type = "function",
		args = "(int model)",
		returns = "table",
	},
	isTrainDerailable = {
		type = "function",
		args = "(vehicle vehicleToCheck)",
		returns = "bool",
	},
	isTrainDerailed = {
		type = "function",
		args = "(vehicle vehicleToCheck)",
		returns = "bool",
	},
	isVehicleBlown = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	isVehicleDamageProof = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	isVehicleFuelTankExplodable = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	isVehicleLocked = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	isVehicleOnGround = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	isVehicleTaxiLightOn = {
		type = "function",
		args = "(vehicle taxi)",
		returns = "bool",
	},
	removeVehicleSirens = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	removeVehicleUpgrade = {
		type = "function",
		args = "(vehicle theVehicle, int upgrade)",
		returns = "bool",
	},
	resetVehicleExplosionTime = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	resetVehicleIdleTime = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	respawnVehicle = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	setModelHandling = {
		type = "function",
		args = "(int modelId, string property, var value)",
		returns = "bool",
	},
	setTrainDerailable = {
		type = "function",
		args = "(vehicle derailableVehicle, bool derailable)",
		returns = "bool",
	},
	setTrainDerailed = {
		type = "function",
		args = "(vehicle vehicleToDerail, bool derailed)",
		returns = "bool",
	},
	setTrainDirection = {
		type = "function",
		args = "(vehicle train, bool clockwise)",
		returns = "bool",
	},
	setTrainPosition = {
		type = "function",
		args = "(vehicle train, float position)",
		returns = "bool",
	},
	setTrainSpeed = {
		type = "function",
		args = "(vehicle train, float speed)",
		returns = "bool",
	},
	setTrainTrack = {
		type = "function",
		args = "(vehicle train, int track)",
		returns = "bool",
	},
	setVehicleColor = {
		type = "function",
		args = "(vehicle theVehicle, int r1, int g1, int b1, [int r2, int g2, int b2, int r3, int g3, int b3, int r4, int g4, int b4])",
		returns = "bool",
	},
	setVehicleDamageProof = {
		type = "function",
		args = "(vehicle theVehicle, bool damageProof)",
		returns = "bool",
	},
	setVehicleDoorOpenRatio = {
		type = "function",
		args = "(vehicle theVehicle, int door, float ratio [, int time = 0])",
		returns = "bool",
	},
	setVehicleDoorState = {
		type = "function",
		args = "(vehicle theVehicle, int door, int state)",
		returns = "bool",
	},
	setVehicleDoorsUndamageable = {
		type = "function",
		args = "(vehicle theVehicle, bool state)",
		returns = "bool",
	},
	setVehicleEngineState = {
		type = "function",
		args = "(vehicle theVehicle, bool engineState)",
		returns = "bool",
	},
	setVehicleFuelTankExplodable = {
		type = "function",
		args = "(vehicle theVehicle, bool explodable)",
		returns = "bool",
	},
	setVehicleHandling = {
		type = "function",
		args = "(element theVehicle, string property, var value)",
		returns = "bool",
	},
	setVehicleHeadLightColor = {
		type = "function",
		args = "(vehicle theVehicle, int red, int green, int blue)",
		returns = "bool",
	},
	setVehicleIdleRespawnDelay = {
		type = "function",
		args = "(vehicle theVehicle, int timeDelay)",
		returns = "bool",
	},
	setVehicleLandingGearDown = {
		type = "function",
		args = "(vehicle theVehicle, bool gearState)",
		returns = "bool",
	},
	setVehicleLightState = {
		type = "function",
		args = "(vehicle theVehicle, int light, int state)",
		returns = "bool",
	},
	setVehicleLocked = {
		type = "function",
		args = "(vehicle theVehicle, bool locked)",
		returns = "bool",
	},
	setVehicleOverrideLights = {
		type = "function",
		args = "(vehicle theVehicle, int value)",
		returns = "bool",
	},
	setVehiclePaintjob = {
		type = "function",
		args = "(vehicle theVehicle, int value)",
		returns = "bool",
	},
	setVehiclePanelState = {
		type = "function",
		args = "(vehicle theVehicle, int panelID, int state)",
		returns = "bool",
	},
	setVehiclePlateText = {
		type = "function",
		args = "(element theVehicle, string numberplate)",
		returns = "bool",
	},
	setVehicleRespawnDelay = {
		type = "function",
		args = "(vehicle theVehicle, int timeDelay)",
		returns = "bool",
	},
	setVehicleRespawnPosition = {
		type = "function",
		args = "(vehicle theVehicle, float x, float y, float z [, float rx, float ry, float rz])",
		returns = "bool",
	},
	setVehicleSirens = {
		type = "function",
		args = "(vehicle theVehicle, int sirenPoint, float posX, float posY, float posZ, float red, float green, float blue, [float alpha = 255, float minAlpha = 0.0])",
		returns = "bool",
	},
	setVehicleSirensOn = {
		type = "function",
		args = "(vehicle theVehicle , bool sirensOn)",
		returns = "bool",
	},
	setVehicleTaxiLightOn = {
		type = "function",
		args = "(vehicle taxi, bool LightState)",
		returns = "bool",
	},
	setVehicleTurretPosition = {
		type = "function",
		args = "(vehicle turretVehicle, float positionX, float positionY)",
		returns = "bool",
	},
	setVehicleVariant = {
		type = "function",
		args = "(vehicle theVehicle [, int variant1, int variant2 ])",
		returns = "bool",
	},
	setVehicleWheelStates = {
		type = "function",
		args = "(vehicle theVehicle, int frontLeft, [ int rearLeft = -1, int frontRight = -1, int rearRight = -1])",
		returns = "bool",
	},
	spawnVehicle = {
		type = "function",
		args = "(vehicle theVehicle, float x, float y, float z [, float rx, float ry, float rz])",
		returns = "bool",
	},
	toggleVehicleRespawn = {
		type = "function",
		args = "(vehicle theVehicle, bool respawn)",
		returns = "bool",
	},
	createWater = {
		type = "function",
		args = "(int x1, int y1, float z1, int x2, int y2, float z2, int x3, int y3, float z3 [, int x4, int y4, float z4] [, bool bShallow = false])",
		returns = "water",
	},
	getWaterColor = {
		type = "function",
		args = "()",
		returns = "4 ints",
	},
	getWaterVertexPosition = {
		type = "function",
		args = "(water theWater, int vertexIndex)",
		returns = "2 ints 1 float",
	},
	getWaveHeight = {
		type = "function",
		args = "()",
		returns = "float",
	},
	resetWaterColor = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	setWaterColor = {
		type = "function",
		args = "(int red, int green, int blue [, int alpha = 200])",
		returns = "bool",
	},
	setWaterLevel = {
		type = "function",
		args = "([water theWater, ] float level)",
		returns = "bool",
	},
	setWaterVertexPosition = {
		type = "function",
		args = "(water theWater, int vertexIndex, int x, int y, float z)",
		returns = "bool",
	},
	setWaveHeight = {
		type = "function",
		args = "(float height)",
		returns = "bool",
	},
	getOriginalWeaponProperty = {
		type = "function",
		args = "(int weaponId/string weaponName, string weaponSkill, string property)",
		returns = "int",
	},
	getSlotFromWeapon = {
		type = "function",
		args = "(int weaponId)",
		returns = "int",
	},
	getWeaponIDFromName = {
		type = "function",
		args = "(string name)",
		returns = "int",
	},
	getWeaponNameFromID = {
		type = "function",
		args = "(int id)",
		returns = "string",
	},
	getWeaponProperty = {
		type = "function",
		args = "(int weaponID/string weaponName, string weaponSkill, string property)",
		returns = "int",
	},
	giveWeapon = {
		type = "function",
		args = "(ped thePlayer, int weapon [, int ammo = 30, bool setAsCurrent = false])",
		returns = "bool",
	},
	setWeaponAmmo = {
		type = "function",
		args = "(player thePlayer, int weapon, int totalAmmo [, int ammoInClip = 0 ])",
		returns = "bool",
	},
	setWeaponProperty = {
		type = "function",
		args = "(int weaponID/string weaponName, string weaponSkill, string property, int/float theValue)",
		returns = "bool",
	},
	takeAllWeapons = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	takeWeapon = {
		type = "function",
		args = "(player thePlayer, int weaponId [, int ammo])",
		returns = "bool",
	},
	areTrafficLightsLocked = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	getAircraftMaxVelocity = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getCloudsEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	getFarClipDistance = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getFogDistance = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getGameSpeed = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getGravity = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getHeatHaze = {
		type = "function",
		args = "()",
		returns = "8 ints 1 bool",
	},
	getJetpackMaxHeight = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getJetpackWeaponEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	getMinuteDuration = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getMoonSize = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getOcclusionsEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	getRainLevel = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getSkyGradient = {
		type = "function",
		args = "()",
		returns = "6 ints",
	},
	getSunColor = {
		type = "function",
		args = "()",
		returns = "6 ints",
	},
	getSunSize = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getTime = {
		type = "function",
		args = "()",
		returns = "2 ints",
	},
	getTrafficLightState = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getWeather = {
		type = "function",
		args = "()",
		returns = "2 ints",
	},
	getWindVelocity = {
		type = "function",
		args = "()",
		returns = "3 ints",
	},
	getZoneName = {
		type = "function",
		args = "(float x, float y, float z, [bool citiesonly = false])",
		returns = "string",
	},
	isGarageOpen = {
		type = "function",
		args = "(int garageID)",
		returns = "bool",
	},
	removeWorldModel = {
		type = "function",
		args = "(int modelID, float radius, float x, float y, float z [, int interior = 0 ])",
		returns = "bool",
	},
	resetFarClipDistance = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetFogDistance = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetHeatHaze = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetMoonSize = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetRainLevel = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetSkyGradient = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetSunColor = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetSunSize = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetWindVelocity = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	restoreAllWorldModels = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	restoreWorldModel = {
		type = "function",
		args = "(int modelID, float radius, float x, float y, float z [, int iInterior = -1])",
		returns = "bool",
	},
	setAircraftMaxVelocity = {
		type = "function",
		args = "(float velocity)",
		returns = "bool",
	},
	setCloudsEnabled = {
		type = "function",
		args = "(bool enabled)",
		returns = "bool",
	},
	setFarClipDistance = {
		type = "function",
		args = "(float distance)",
		returns = "bool",
	},
	setFogDistance = {
		type = "function",
		args = "(float distance)",
		returns = "bool",
	},
	setGameSpeed = {
		type = "function",
		args = "(float value)",
		returns = "bool",
	},
	setGarageOpen = {
		type = "function",
		args = "(int garageID, bool open)",
		returns = "bool",
	},
	setGravity = {
		type = "function",
		args = "(float level)",
		returns = "bool",
	},
	setHeatHaze = {
		type = "function",
		args = "(int intensity, [ int randomShift = 0, int speedMin = 12, int speedMax = 18, int scanSizeX = 75, int scanSizeY = 80, int renderSizeX = 80, int renderSizeY = 85, bool bShowInside = false])",
		returns = "bool",
	},
	setInteriorSoundsEnabled = {
		type = "function",
		args = "(bool enabled)",
		returns = "bool",
	},
	setJetpackWeaponEnabled = {
		type = "function",
		args = "(string weapon, bool enabled)",
		returns = "bool",
	},
	setMinuteDuration = {
		type = "function",
		args = "(int milliseconds)",
		returns = "bool",
	},
	setMoonSize = {
		type = "function",
		args = "(int size)",
		returns = "bool",
	},
	setOcclusionsEnabled = {
		type = "function",
		args = "(bool enabled)",
		returns = "bool",
	},
	setRainLevel = {
		type = "function",
		args = "(float level)",
		returns = "bool",
	},
	setSkyGradient = {
		type = "function",
		args = "([ int topRed = 0, int topGreen = 0, int topBlue = 0, int bottomRed = 0, int bottomGreen = 0, int bottomBlue = 0])",
		returns = "bool",
	},
	setSunColor = {
		type = "function",
		args = "(int aRed, int aGreen, int aBlue, int bRed, int bGreen, int bBlue)",
		returns = "bool",
	},
	setSunSize = {
		type = "function",
		args = "(int size)",
		returns = "bool",
	},
	setTime = {
		type = "function",
		args = "(int hour, int minute)",
		returns = "bool",
	},
	setTrafficLightState = {
		type = "function",
		args = "(string / int state)",
		returns = "bool",
	},
	setTrafficLightsLocked = {
		type = "function",
		args = "(bool toggle)",
		returns = "bool",
	},
	setWeather = {
		type = "function",
		args = "(int weatherId)",
		returns = "bool",
	},
	setWeatherBlended = {
		type = "function",
		args = "(int weatherId)",
		returns = "bool",
	},
	setWindVelocity = {
		type = "function",
		args = "(float velocityX, float velocityY, float velocityZ)",
		returns = "bool",
	},
	xmlCopyFile = {
		type = "function",
		args = "(xmlnode nodeToCopy, string newFilePath)",
		returns = "xmlnode",
	},
	xmlCreateChild = {
		type = "function",
		args = "(xmlnode parentNode, string tagName)",
		returns = "xmlnode",
	},
	xmlCreateFile = {
		type = "function",
		args = "(string filePath, string rootNodeName)",
		returns = "xmlnode",
	},
	xmlDestroyNode = {
		type = "function",
		args = "(xmlnode theXMLNode)",
		returns = "bool",
	},
	xmlFindChild = {
		type = "function",
		args = "(xmlnode parent, string tagName, int index)",
		returns = "xmlnode",
	},
	xmlLoadFile = {
		type = "function",
		args = "(string filePath [, bool readOnly = false])",
		returns = "xmlnode",
	},
	xmlNodeGetAttribute = {
		type = "function",
		args = "(xmlnode node, string name)",
		returns = "string",
	},
	xmlNodeGetAttributes = {
		type = "function",
		args = "(xmlnode node)",
		returns = "table",
	},
	xmlNodeGetChildren = {
		type = "function",
		args = "(xmlnode parent, [ int index])",
		returns = "table/xmlnode",
	},
	xmlNodeGetName = {
		type = "function",
		args = "(xmlnode node)",
		returns = "string",
	},
	xmlNodeGetParent = {
		type = "function",
		args = "(xmlnode node)",
		returns = "xmlnode",
	},
	xmlNodeGetValue = {
		type = "function",
		args = "(xmlnode theXMLNode)",
		returns = "string",
	},
	xmlNodeSetAttribute = {
		type = "function",
		args = "(xmlnode node, string name, string/float value)",
		returns = "bool",
	},
	xmlNodeSetName = {
		type = "function",
		args = "(xmlnode node, string name)",
		returns = "bool",
	},
	xmlNodeSetValue = {
		type = "function",
		args = "(xmlnode theXMLNode, string value [, bool setCDATA = false])",
		returns = "bool",
	},
	xmlSaveFile = {
		type = "function",
		args = "(xmlnode rootNode)",
		returns = "bool",
	},
	xmlUnloadFile = {
		type = "function",
		args = "(xmlnode node)",
		returns = "bool",
	},

	["onAccountDataChange"] = {type = "value", description = "account theAccount, string theKey, string theValue"},
	["onConsole"] = {type = "value", description = "string theMessage"},
	["onColShapeHit"] = {type = "value", description = "element hitElement, bool matchingDimension"},
	["onColShapeLeave"] = {type = "value", description = "element leaveElement, bool matchingDimension"},
	["onElementClicked"] = {type = "value", description = "string mouseButton, string buttonState, player playerWhoClicked, float clickPosX, float clickPosY, float clickPosZ"},
	["onElementColShapeHit"] = {type = "value", description = "colshape theColShape, bool matchingDimension"},
	["onElementColShapeLeave"] = {type = "value", description = "colshape theColShape, bool matchingDimension"},
	["onElementDataChange"] = {type = "value", description = "string theName, var theOldValue"},
	["onElementDestroy"] = {type = "value", description = ""},
	["onElementModelChange"] = {type = "value", description = "int oldModel, int newModel"},
	["onElementStartSync"] = {type = "value", description = "player newSyncer"},
	["onElementStopSync"] = {type = "value", description = "player oldSyncer"},
	["onMarkerHit"] = {type = "value", description = "element hitElement, bool matchingDimension"},
	["onMarkerLeave"] = {type = "value", description = "element leftElement, bool matchingDimension"},
	["onPickupHit"] = {type = "value", description = "player thePlayer"},
	["onPickupLeave"] = {type = "value", description = "player thePlayer"},
	["onPickupSpawn"] = {type = "value", description = ""},
	["onPickupUse"] = {type = "value", description = "player playerWhoUsed"},
	["onPlayerACInfo"] = {type = "value", description = "table detectedACList, int d3d9Size, string d3d9MD5, string d3d9SHA256"},
	["onPlayerBan"] = {type = "value", description = "ban banPointer, player responsibleElement"},
	["onPlayerChangeNick"] = {type = "value", description = "string oldNick, string newNick, bool changedByUser"},
	["onPlayerChat"] = {type = "value", description = "string message, int messageType"},
	["onPlayerClick"] = {type = "value", description = "string mouseButton, string buttonState, element clickedElement, float worldPosX, float worldPosY, float worldPosZ, float screenPosX, float screenPosY"},
	["onPlayerCommand"] = {type = "value", description = "string command"},
	["onPlayerConnect"] = {type = "value", description = "string playerNick, string playerIP, string playerUsername, string playerSerial, int playerVersionNumber, string playerVersionString"},
	["onPlayerContact"] = {type = "value", description = "element previousElement, element currentElement"},
	["onPlayerDamage"] = {type = "value", description = "player attacker, int attackerweapon, int bodypart, float loss"},
	["onPlayerJoin"] = {type = "value", description = ""},
	["onPlayerLogin"] = {type = "value", description = "account thePreviousAccount, account theCurrentAccount"},
	["onPlayerLogout"] = {type = "value", description = "account thePreviousAccount, account theCurrentAccount"},
	["onPlayerMarkerHit"] = {type = "value", description = "marker markerHit, bool matchingDimension"},
	["onPlayerMarkerLeave"] = {type = "value", description = "marker markerLeft, bool matchingDimension"},
	["onPlayerModInfo"] = {type = "value", description = "string filename, table itemlist"},
	["onPlayerMute"] = {type = "value", description = ""},
	["onPlayerNetworkStatus"] = {type = "value", description = "int status, int ticks"},
	["onPlayerPickupHit"] = {type = "value", description = "pickup pickupHit"},
	["onPlayerPickupLeave"] = {type = "value", description = "pickup pickupLeft"},
	["onPlayerPickupUse"] = {type = "value", description = "pickup thePickupToUse"},
	["onPlayerPrivateMessage"] = {type = "value", description = "string message, player recipient"},
	["onPlayerQuit"] = {type = "value", description = "string quitType, string reason, element responsibleElement"},
	["onPlayerScreenShot"] = {type = "value", description = "resource theResource, string status, string imageData, int timestamp, string tag"},
	["onPlayerSpawn"] = {type = "value", description = "float posX, float posY, float posZ, float spawnRotation, team theTeam, int theSkin, int theInterior, int theDimension"},
	["onPlayerStealthKill"] = {type = "value", description = "element targetPlayer"},
	["onPlayerTarget"] = {type = "value", description = "element targettedElement"},
	["onPlayerUnmute"] = {type = "value", description = ""},
	["onPlayerVehicleEnter"] = {type = "value", description = "vehicle theVehicle, int seat, player jacked"},
	["onPlayerVehicleExit"] = {type = "value", description = "vehicle theVehicle, int seat, player jacker"},
	["onPlayerVoiceStart"] = {type = "value", description = ""},
	["onPlayerVoiceStop"] = {type = "value", description = ""},
	["onPlayerWasted"] = {type = "value", description = "int totalAmmo, element killer, int killerWeapon, int bodypart, bool stealth"},
	["onPlayerWeaponFire"] = {type = "value", description = "int weapon, float endX, float endY, float endZ, element hitElement, float startX, float startY, float startZ"},
	["onPlayerWeaponSwitch"] = {type = "value", description = "int previousWeaponID, int currentWeaponID"},
	["onPedWasted"] = {type = "value", description = "int totalAmmo, element killer, int killerWeapon, int bodypart, bool stealth"},
	["onPedWeaponSwitch"] = {type = "value", description = "int previousWeaponID, int currentWeaponID"},
	["onResourcePreStart"] = {type = "value", description = "resource startingResource"},
	["onResourceStart"] = {type = "value", description = "resource startedResource"},
	["onResourceStop"] = {type = "value", description = "resource stoppedResource"},
	["onBan"] = {type = "value", description = "ban theBan"},
	["onChatMessage"] = {type = "value", description = "string theMessage, resource / element theElement"},
	["onDebugMessage"] = {type = "value", description = "string message, int level, string file, int line, int r, int g, int b"},
	["onSettingChange"] = {type = "value", description = "string setting, string oldValue, string newValue"},
	["onUnban"] = {type = "value", description = "ban theBan, player responsibleElement"},
	["onTrailerAttach"] = {type = "value", description = "vehicle theTruck"},
	["onTrailerDetach"] = {type = "value", description = "vehicle theTruck"},
	["onVehicleDamage"] = {type = "value", description = "float loss"},
	["onVehicleEnter"] = {type = "value", description = "player thePlayer, int seat, player jacked"},
	["onVehicleExit"] = {type = "value", description = "player thePlayer, int seat, player jacker"},
	["onVehicleExplode"] = {type = "value", description = ""},
	["onVehicleRespawn"] = {type = "value", description = "bool exploded"},
	["onVehicleStartEnter"] = {type = "value", description = "player enteringPlayer, int seat, player jacked, int door"},
	["onVehicleStartExit"] = {type = "value", description = "player exitingPlayer, int seat, player jacked, int door"},
	["onWeaponFire"] = {type = "value", description = ""},

	["onClientBrowserCreated"] = {type = "value", description = ""},
	["onClientBrowserCursorChange"] = {type = "value", description = "int cursorId"},
	["onClientBrowserDocumentReady"] = {type = "value", description = "string url"},
	["onClientBrowserInputFocusChanged"] = {type = "value", description = "bool gainedFocus"},
	["onClientBrowserLoadingFailed"] = {type = "value", description = "string url, int errorCode, string errorDescription"},
	["OnClientBrowserLoadingStart"] = {type = "value", description = ""},
	["onClientBrowserNavigate"] = {type = "value", description = "string targetURL, bool isBlocked, bool isMainFrame"},
	["onClientBrowserPopup"] = {type = "value", description = "string targetURL, string openerURL, bool isPopup"},
	["onClientBrowserResourceBlocked"] = {type = "value", description = "string url, string domain, int reason"},
	["OnClientBrowserTooltip"] = {type = "value", description = ""},
	["onClientBrowserWhitelistChange"] = {type = "value", description = "table changedDomains"},
	["onClientColShapeHit"] = {type = "value", description = "element theElement, bool matchingDimension"},
	["onClientColShapeLeave"] = {type = "value", description = "element theElement, bool matchingDimension"},
	["onClientElementColShapeHit"] = {type = "value", description = "colshape theShape, bool matchingDimension"},
	["onClientElementColShapeLeave"] = {type = "value", description = "colshape theShape, bool matchingDimension"},
	["onClientElementDataChange"] = {type = "value", description = "string dataName, string oldValue"},
	["onClientElementDestroy"] = {type = "value", description = ""},
	["onClientElementStreamIn"] = {type = "value", description = ""},
	["onClientElementStreamOut"] = {type = "value", description = ""},
	["onClientCharacter"] = {type = "value", description = "string character"},
	["onClientClick"] = {type = "value", description = "string button, string state, int absoluteX, int absoluteY, float worldX, float worldY, float worldZ, element clickedWorld"},
	["onClientCursorMove"] = {type = "value", description = "float cursorX, float cursorY, int absoluteX, int absoluteY, float worldX, float worldY, float worldZ"},
	["onClientDoubleClick"] = {type = "value", description = "string button, int absoluteX, int absoluteY, float worldX, float worldY, float worldZ, element clickedWorld"},
	["onClientGUIAccepted"] = {type = "value", description = "element editBox"},
	["onClientGUIBlur"] = {type = "value", description = ""},
	["onClientGUIChanged"] = {type = "value", description = "element theElement"},
	["onClientGUIClick"] = {type = "value", description = "string button, string state, int absoluteX, int absoluteY"},
	["onClientGUIComboBoxAccepted"] = {type = "value", description = "element theElement"},
	["onClientGUIDoubleClick"] = {type = "value", description = "string button, string state, int absoluteX, int absoluteY"},
	["onClientGUIFocus"] = {type = "value", description = ""},
	["onClientGUIMouseDown"] = {type = "value", description = "string button, int absoluteX, int absoluteY"},
	["onClientGUIMouseUp"] = {type = "value", description = "string button, int absoluteX, int absoluteY"},
	["onClientGUIMove"] = {type = "value", description = ""},
	["onClientGUIScroll"] = {type = "value", description = "element scrolled"},
	["onClientGUISize"] = {type = "value", description = ""},
	["onClientGUITabSwitched"] = {type = "value", description = "element theElement"},
	["onClientKey"] = {type = "value", description = "string button, bool pressOrRelease"},
	["onClientMouseEnter"] = {type = "value", description = "int absoluteX, int absoluteY, element leftGUI"},
	["onClientMouseLeave"] = {type = "value", description = "int absoluteX, int absoluteY, element enteredGUI"},
	["onClientMouseMove"] = {type = "value", description = "int absoluteX, int absoluteY"},
	["onClientMouseWheel"] = {type = "value", description = "int upOrDown"},
	["onClientMarkerHit"] = {type = "value", description = "player hitPlayer, bool matchingDimension"},
	["onClientMarkerLeave"] = {type = "value", description = "player leftPlayer, bool matchingDimension"},
	["onClientPedChoke"] = {type = "value", description = "int weaponID, ped responsiblePed"},
	["onClientPedDamage"] = {type = "value", description = "element attacker, int weapon, int bodypart [, float loss ]"},
	["onClientPedHeliKilled"] = {type = "value", description = "vehicle killer"},
	["onClientPedHitByWaterCannon"] = {type = "value", description = "ped pedHit"},
	["onClientPedWasted"] = {type = "value", description = "element killer, int weapon, int bodypart, float loss"},
	["onClientPedWeaponFire"] = {type = "value", description = "int weapon, int ammo, int ammoInClip, float hitX, float hitY, float hitZ, element hitElement"},
	["onClientPickupHit"] = {type = "value", description = "player thePlayer, bool matchingDimension"},
	["onClientPickupLeave"] = {type = "value", description = "player thePlayer, bool matchingDimension"},
	["onClientPlayerChangeNick"] = {type = "value", description = "string oldNick, string newNick"},
	["onClientPlayerChoke"] = {type = "value", description = "int weaponID, ped responsiblePed"},
	["onClientPlayerDamage"] = {type = "value", description = "element attacker, int weapon, int bodypart [, float loss ]"},
	["onClientPlayerHeliKilled"] = {type = "value", description = "vehicle killer"},
	["onClientPlayerHitByWaterCannon"] = {type = "value", description = "player playerHit"},
	["onClientPlayerJoin"] = {type = "value", description = ""},
	["onClientPlayerPickupHit"] = {type = "value", description = "pickup thePickup, bool matchingDimension"},
	["onClientPlayerPickupLeave"] = {type = "value", description = "pickup thePickup, bool matchingDimension"},
	["onClientPlayerQuit"] = {type = "value", description = "string reason"},
	["onClientPlayerRadioSwitch"] = {type = "value", description = "int stationID"},
	["onClientPlayerSpawn"] = {type = "value", description = "team hisTeam"},
	["onClientPlayerStealthKill"] = {type = "value", description = "element targetPlayer"},
	["onClientPlayerStuntFinish"] = {type = "value", description = "string stuntType, int stuntTime, float stuntDistance"},
	["onClientPlayerStuntStart"] = {type = "value", description = "string stuntType"},
	["onClientPlayerTarget"] = {type = "value", description = "element target"},
	["onClientPlayerVehicleEnter"] = {type = "value", description = "vehicle theVehicle, int seat"},
	["onClientPlayerVehicleExit"] = {type = "value", description = "vehicle theVehicle, int seat"},
	["onClientPlayerVoicePause"] = {type = "value", description = "string reason"},
	["onClientPlayerVoiceResumed"] = {type = "value", description = "string reason"},
	["onClientPlayerVoiceStart"] = {type = "value", description = ""},
	["onClientPlayerVoiceStop"] = {type = "value", description = ""},
	["onClientPlayerWasted"] = {type = "value", description = "element killer, int weapon, int bodypart"},
	["onClientPlayerWeaponFire"] = {type = "value", description = "int weapon, int ammo, int ammoInClip, float hitX, float hitY, float hitZ, element hitElement, float startX, float startY, float startZ"},
	["onClientPlayerWeaponSwitch"] = {type = "value", description = "int previousWeaponSlot, int currentWeaponSlot"},
	["onClientObjectBreak"] = {type = "value", description = "element attacker"},
	["onClientObjectDamage"] = {type = "value", description = "float loss, element attacker"},
	["onClientProjectileCreation"] = {type = "value", description = "element creator"},
	["onClientResourceStart"] = {type = "value", description = "resource startedResource"},
	["onClientResourceStop"] = {type = "value", description = "resource stoppedResource"},
	["onClientSoundBeat"] = {type = "value", description = "double theTime"},
	["onClientSoundChangedMeta"] = {type = "value", description = "string streamTitle"},
	["onClientSoundFinishedDownload"] = {type = "value", description = "int length"},
	["onClientSoundStarted"] = {type = "value", description = "string reason"},
	["onClientSoundStopped"] = {type = "value", description = "string reason"},
	["onClientSoundStream"] = {type = "value", description = "bool success, int length, string streamName"},
	["onClientTrailerAttach"] = {type = "value", description = "vehicle towedBy"},
	["onClientTrailerDetach"] = {type = "value", description = "vehicle towedBy"},
	["onClientVehicleCollision"] = {type = "value", description = "element theHitElement, float force, int bodypart, float collisionX, float collisionY, float collisionZ, float normalX, float normalY, float normalZ, float hitElementForce, int model"},
	["onClientVehicleDamage"] = {type = "value", description = "element theAttacker, int theWeapon, float loss, float damagePosX, float damagePosY, float damagePosZ, int tireID"},
	["onClientVehicleEnter"] = {type = "value", description = "player thePlayer, int seat"},
	["onClientVehicleExit"] = {type = "value", description = "player thePlayer, int seat"},
	["onClientVehicleExplode"] = {type = "value", description = ""},
	["onClientVehicleNitroStateChange"] = {type = "value", description = "bool state"},
	["onClientVehicleRespawn"] = {type = "value", description = ""},
	["onClientVehicleStartEnter"] = {type = "value", description = "player thePlayer, int seat, int door"},
	["onClientVehicleStartExit"] = {type = "value", description = "player thePlayer, int seat, int door"},
	["onClientWeaponFire"] = {type = "value", description = "element hitElement, float posX,  float posY, float posZ, float normalX, float normalY, float normalZ, int materialType, int lighting, int pieceHit"},
	["onClientChatMessage"] = {type = "value", description = "string text, int r, int g, int b"},
	["onClientConsole"] = {type = "value", description = "string text"},
	["onClientDebugMessage"] = {type = "value", description = "string message, int level, string file, int line"},
	["onClientExplosion"] = {type = "value", description = "float x, float y, float z, int theType"},
	["onClientFileDownloadComplete"] = {type = "value", description = "string fileName, bool success"},
	["onClientHUDRender"] = {type = "value", description = ""},
	["onClientMinimize"] = {type = "value", description = ""},
	["onClientPlayerNetworkStatus"] = {type = "value", description = "int status, int ticks"},
	["onClientPreRender"] = {type = "value", description = "float timeSlice"},
	["onClientRender"] = {type = "value", description = ""},
	["onClientRestore"] = {type = "value", description = ""},
	
	
	
	getRadioChannel = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getRadioChannelName = {
		type = "function",
		args = "(int id)",
		returns = "string",
	},
	getSFXStatus = {
		type = "function",
		args = "(string audioContainer)",
		returns = "bool",
	},
	getSoundBPM = {
		type = "function",
		args = "(element theSound)",
		returns = "int",
	},
	getSoundEffects = {
		type = "function",
		args = "(element theSound)",
		returns = "table",
	},
	getSoundFFTData = {
		type = "function",
		args = "(element theSound, int iSamples [, int iBands = 0])",
		returns = "table",
	},
	getSoundLength = {
		type = "function",
		args = "(element theSound)",
		returns = "float",
	},
	getSoundLevelData = {
		type = "function",
		args = "(element theSound)",
		returns = "2 ints",
	},
	getSoundMaxDistance = {
		type = "function",
		args = "(element theSound)",
		returns = "int",
	},
	getSoundMetaTags = {
		type = "function",
		args = "(element theSound)",
		returns = "table",
	},
	getSoundMinDistance = {
		type = "function",
		args = "(element theSound)",
		returns = "int",
	},
	getSoundPan = {
		type = "function",
		args = "(element theSound)",
		returns = "float",
	},
	getSoundPosition = {
		type = "function",
		args = "(element theSound)",
		returns = "float",
	},
	getSoundProperties = {
		type = "function",
		args = "(element theSound)",
		returns = "3 floats 1 bool",
	},
	getSoundSpeed = {
		type = "function",
		args = "(element theSound)",
		returns = "float",
	},
	getSoundVolume = {
		type = "function",
		args = "(element theSound)",
		returns = "float",
	},
	getSoundWaveData = {
		type = "function",
		args = "(element theSound, int iSamples)",
		returns = "table",
	},
	isSoundPanningEnabled = {
		type = "function",
		args = "(element theSound)",
		returns = "bool",
	},
	isSoundPaused = {
		type = "function",
		args = "(element theSound)",
		returns = "bool",
	},
	playSFX = {
		type = "function",
		args = "(string containerName, int bankId, int soundId [, bool looped = false])",
		returns = "element",
	},
	playSFX3D = {
		type = "function",
		args = "(string containerName, int bankId, int soundId, float x, float y, float z [, bool looped = false])",
		returns = "element",
	},
	playSound = {
		type = "function",
		args = "(string soundPath [, bool looped = false, bool throttled = true])",
		returns = "element",
	},
	playSound3D = {
		type = "function",
		args = "(string soundPath, float x, float y, float z [, bool looped = false])",
		returns = "element",
	},
	playSound3D = {
		type = "function",
		args = "(string soundURL, float x, float y, float z [, bool looped = false, bool throttled = true])",
		returns = "element",
	},
	playSoundFrontEnd = {
		type = "function",
		args = "(player thePlayer, int theSound)",
		returns = "bool",
	},
	setRadioChannel = {
		type = "function",
		args = "(int ID)",
		returns = "bool",
	},
	setSoundEffectEnabled = {
		type = "function",
		args = "(element theSound, string effectName, bool bEnable)",
		returns = "bool",
	},
	setSoundMaxDistance = {
		type = "function",
		args = "(element theSound, int distance)",
		returns = "bool",
	},
	setSoundMinDistance = {
		type = "function",
		args = "(element theSound, int distance)",
		returns = "bool",
	},
	setSoundPan = {
		type = "function",
		args = "(element theSound, float pan)",
		returns = "bool",
	},
	setSoundPanningEnabled = {
		type = "function",
		args = "(element theSound, bool enable)",
		returns = "bool",
	},
	setSoundPaused = {
		type = "function",
		args = "(element theSound, bool paused)",
		returns = "bool",
	},
	setSoundPosition = {
		type = "function",
		args = "(element theSound, float position)",
		returns = "bool",
	},
	setSoundProperties = {
		type = "function",
		args = "(element theSound, float fSampleRate, float fTempo, float fPitch, bool bReverse)",
		returns = "bool",
	},
	setSoundSpeed = {
		type = "function",
		args = "(element theSound, float speed)",
		returns = "bool",
	},
	setSoundVolume = {
		type = "function",
		args = "(element theSound, float volume)",
		returns = "bool",
	},
	stopSound = {
		type = "function",
		args = "(element theSound)",
		returns = "bool",
	},
	canBrowserNavigateBack = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "bool",
	},
	canBrowserNavigateForward = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "bool",
	},
	createBrowser = {
		type = "function",
		args = "(int width, int height, bool isLocal [, bool transparent = false])",
		returns = "element",
	},
	executeBrowserJavascript = {
		type = "function",
		args = "(browser webBrowser, string jsCode)",
		returns = "bool",
	},
	focusBrowser = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "bool",
	},
	getBrowserProperty = {
		type = "function",
		args = "(browser theBrowser, string key)",
		returns = "bool",
	},
	getBrowserSettings = {
		type = "function",
		args = "()",
		returns = "table",
	},
	getBrowserSource = {
		type = "function",
		args = "(browser webBrowser, function callback)",
		returns = "bool",
	},
	getBrowserTitle = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "string",
	},
	getBrowserURL = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "string",
	},
	injectBrowserMouseDown = {
		type = "function",
		args = "(browser webBrowser, string mouseButton)",
		returns = "bool",
	},
	injectBrowserMouseMove = {
		type = "function",
		args = "(browser webBrowser, int posX, int posY)",
		returns = "bool",
	},
	injectBrowserMouseUp = {
		type = "function",
		args = "(browser webBrowser, string mouseButton)",
		returns = "bool",
	},
	injectBrowserMouseWheel = {
		type = "function",
		args = "(browser webBrowser, int verticalScroll, int horizontalScroll)",
		returns = "bool",
	},
	isBrowserDomainBlocked = {
		type = "function",
		args = "(string address [, bool isURL = false])",
		returns = "bool",
	},
	isBrowserFocused = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "bool",
	},
	isBrowserLoading = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "bool",
	},
	loadBrowserURL = {
		type = "function",
		args = "(browser webBrowser, string url [, string postData = '', bool urlEncoded = true])",
		returns = "bool",
	},
	navigateBrowserBack = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "bool",
	},
	navigateBrowserForward = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "bool",
	},
	reloadBrowserPage = {
		type = "function",
		args = "(browser webBrowser)",
		returns = "bool",
	},
	requestBrowserDomains = {
		type = "function",
		args = "(table pages [, bool parseAsURL = false, function callback])",
		returns = "bool",
	},
	resizeBrowser = {
		type = "function",
		args = "(browser webBrowser, float width, float height)",
		returns = "bool",
	},
	setBrowserAjaxHandler = {
		type = "function",
		args = "(browser webBrowser, string url [, function handler])",
		returns = "bool",
	},
	setBrowserProperty = {
		type = "function",
		args = "(browser theBrowser, string key, string value)",
		returns = "bool",
	},
	setBrowserRenderingPaused = {
		type = "function",
		args = "(browser webBrowser, bool paused)",
		returns = "bool",
	},
	setBrowserVolume = {
		type = "function",
		args = "([browser webBrowser], float volume)",
		returns = "bool",
	},
	toggleBrowserDevTools = {
		type = "function",
		args = "(browser webBrowser, bool visible)",
		returns = "bool",
	},
	guiCreateBrowser = {
		type = "function",
		args = "(float x, float y, float width, float height, bool isLocal, bool isTransparent, bool isRelative [ , element parent = nil])",
		returns = "gui-browser",
	},
	guiGetBrowser = {
		type = "function",
		args = "(gui-browser theBrowser)",
		returns = "browser",
	},
	getCamera = {
		type = "function",
		args = "()",
		returns = "element",
	},
	getCameraClip = {
		type = "function",
		args = "()",
		returns = "2 bools",
	},
	getCameraFieldOfView = {
		type = "function",
		args = "(string cameraMode)",
		returns = "float",
	},
	getCameraGoggleEffect = {
		type = "function",
		args = "()",
		returns = "string",
	},
	getCameraShakeLevel = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getCameraViewMode = {
		type = "function",
		args = "()",
		returns = "int",
	},
	setCameraClip = {
		type = "function",
		args = "([bool objects = true, bool vehicles = true])",
		returns = "bool",
	},
	setCameraFieldOfView = {
		type = "function",
		args = "(string cameraMode, float fieldOfView)",
		returns = "bool",
	},
	setCameraGoggleEffect = {
		type = "function",
		args = "(string goggleEffect [, bool noiseEnabled = true])",
		returns = "bool",
	},
	setCameraShakeLevel = {
		type = "function",
		args = "(int shakeLevel)",
		returns = "bool",
	},
	setCameraViewMode = {
		type = "function",
		args = "(int viewMode)",
		returns = "bool",
	},
	getCursorAlpha = {
		type = "function",
		args = "()",
		returns = "int",
	},
	getCursorPosition = {
		type = "function",
		args = "()",
		returns = "5 floats",
	},
	setCursorAlpha = {
		type = "function",
		args = "(int alpha)",
		returns = "bool",
	},
	setCursorPosition = {
		type = "function",
		args = "(int cursorX, int cursorY)",
		returns = "bool",
	},
	dxConvertPixels = {
		type = "function",
		args = "(string pixels, string newFormat [, int quality = 80])",
		returns = "string",
	},
	dxCreateFont = {
		type = "function",
		args = "(string filepath [, int size = 9, bool bold = false, string quality = 'proof'])",
		returns = "element",
	},
	dxCreateRenderTarget = {
		type = "function",
		args = "(int width, int height [, bool withAlpha = false])",
		returns = "element",
	},
	dxCreateScreenSource = {
		type = "function",
		args = "(int width, int height)",
		returns = "element",
	},
	dxCreateShader = {
		type = "function",
		args = "(string filepath [, float priority = 0, float maxDistance = 0, bool layered = false, string elementTypes = 'world, vehicle, object, other' ])",
		returns = "element, string",
	},
	dxCreateTexture = {
		type = "function",
		args = "(string pixels / string filepath [, string textureFormat = 'argb', bool mipmaps = true, string textureEdge = 'wrap' ])",
		returns = "element",
	},
	dxCreateTexture = {
		type = "function",
		args = "(int width, int height [, string textureFormat = 'argb', string textureEdge = 'wrap', string textureType = '2d', int depth = 1])",
		returns = "element",
	},
	dxDrawCircle = {
		type = "function",
		args = "(float posX, float posY, float radius [, float startAngle = 0.0, float stopAngle = 360.0, color theColor = white, color theCenterColor = theColor, int segments = 32, int ratio = 1, postGUI = false])",
		returns = "bool",
	},
	dxDrawImage = {
		type = "function",
		args = "(float posX, float posY, float width, float height, mixed image [, float rotation = 0, float rotationCenterOffsetX = 0, float rotationCenterOffsetY = 0, int color = tocolor(255, 255, 255, 255), bool postGUI = false])",
		returns = "bool",
	},
	dxDrawImageSection = {
		type = "function",
		args = "(float posX, float posY, float width, float height, float u, float v, float usize, float vsize, mixed image [, float rotation = 0, float rotationCenterOffsetX = 0, float rotationCenterOffsetY = 0, int color = white, bool postGUI = false])",
		returns = "bool",
	},
	dxDrawLine = {
		type = "function",
		args = "(int startX, int startY, int endX, int endY, int color [, float width = 1.0, bool postGUI = false])",
		returns = "bool",
	},
	dxDrawLine3D = {
		type = "function",
		args = "(float startX, float startY, float startZ, float endX, float endY, float endZ [, int color = 0xFFFFFFFF, float width = 1.0, bool postGUI = false])",
		returns = "bool",
	},
	dxDrawMaterialLine3D = {
		type = "function",
		args = "(float startX, float startY, float startZ, float endX, float endY, float endZ, element material, float width [, int color = white [, bool postGUI = false, ] float faceTowardX, float faceTowardY, float faceTowardZ])",
		returns = "bool",
	},
	dxDrawMaterialPrimitive = {
		type = "function",
		args = "(primitiveType pType, mixed material, bool postGUI, table vertice1 [, table vertice2, ...])",
		returns = "bool",
	},
	dxDrawPrimitive = {
		type = "function",
		args = "(primitiveType pType, bool postGUI, table vertice1 [, table vertice2, ...])",
		returns = "bool",
	},
	dxDrawMaterialSectionLine3D = {
		type = "function",
		args = "(float startX, float startY, float startZ, float endX, float endY, float endZ, float u, float v, float usize, float vsize, element material, int width, [ int color = white, [ bool postGUI = false, ] float faceTowardX, float faceTowardY, float faceTowardZ])",
		returns = "bool",
	},
	dxDrawRectangle = {
		type = "function",
		args = "(float startX, float startY, float width, float height [, int color = white, bool postGUI = false, bool subPixelPositioning = false])",
		returns = "bool",
	},
	dxDrawText = {
		type = "function",
		args = "(string text, float left, float top [, float right = left, float bottom = top, int color = white, float scaleXY = 1.0 [, float scaleY = 1.0 ], mixed font = 'default', string alignX = 'left', string alignY = 'top', bool clip = false, bool wordBreak = false, bool postGUI = false, bool colorCoded = false, bool subPixelPositioning = false, float fRotation = 0.0, float fRotationCenterX = 0.0, float fRotationCenterY = 0.0])",
		returns = "bool",
	},
	dxGetBlendMode = {
		type = "function",
		args = "()",
		returns = "string",
	},
	dxGetFontHeight = {
		type = "function",
		args = "([float scale = 1, mixed font = 'default'])",
		returns = "int",
	},
	dxGetMaterialSize = {
		type = "function",
		args = "(element material)",
		returns = "3 ints",
	},
	dxGetPixelColor = {
		type = "function",
		args = "(string pixels, int x, int y)",
		returns = "4 ints",
	},
	dxGetPixelsSize = {
		type = "function",
		args = "(string pixels)",
		returns = "2 ints",
	},
	dxGetPixelsFormat = {
		type = "function",
		args = "(string pixels)",
		returns = "string",
	},
	dxGetStatus = {
		type = "function",
		args = "()",
		returns = "table",
	},
	dxGetTextWidth = {
		type = "function",
		args = "(string text, [float scale = 1, mixed font='default', bool bColorCoded = false])",
		returns = "float",
	},
	dxGetTexturePixels = {
		type = "function",
		args = "([ int surfaceIndex = 0, ] element texture [, int x = 0, int y = 0, int width = 0, int height = 0 ])",
		returns = "string",
	},
	dxSetAspectRatioAdjustmentEnabled = {
		type = "function",
		args = "(bool bEnabled [, float sourceRatio = 4/3 ])",
		returns = "bool",
	},
	dxSetBlendMode = {
		type = "function",
		args = "(string blendMode)",
		returns = "bool",
	},
	dxSetPixelColor = {
		type = "function",
		args = "(string pixels, int x, int y, int r, int g, int b [, int a = 255])",
		returns = "bool",
	},
	dxSetRenderTarget = {
		type = "function",
		args = "([element renderTarget, bool clear = false])",
		returns = "bool",
	},
	dxSetShaderValue = {
		type = "function",
		args = "(element theShader, string parameterName, mixed value)",
		returns = "bool",
	},
	dxSetShaderTessellation = {
		type = "function",
		args = "(element theShader, int tessellationX, int tessellationY)",
		returns = "bool",
	},
	dxSetShaderTransform = {
		type = "function",
		args = "(element theShader, float rotationX, float rotationY, float rotationZ, [ float rotationCenterOffsetX = 0, float rotationCenterOffsetY = 0, float rotationCenterOffsetZ = 0, bool bRotationCenterOffsetOriginIsScreen = false, float perspectiveCenterOffsetX = 0, float perspectiveCenterOffsetY = 0, bool bPerspectiveCenterOffsetOriginIsScreen = false])",
		returns = "bool",
	},
	dxSetTestMode = {
		type = "function",
		args = "(string testMode)",
		returns = "bool",
	},
	dxSetTextureEdge = {
		type = "function",
		args = "(texture theTexture, string textureEdge [, int border-color])",
		returns = "bool",
	},
	dxSetTexturePixels = {
		type = "function",
		args = "([int surfaceIndex = 0, ] element texture, string pixels [, int x = 0, int y = 0, int width = 0, int height = 0])",
		returns = "bool",
	},
	dxUpdateScreenSource = {
		type = "function",
		args = "(element screenSource [, bool resampleNow = false])",
		returns = "bool",
	},
	createEffect = {
		type = "function",
		args = "(string name, float x, float y, float z [, float rX, float rY, float rZ, float drawDistance = 0, soundEnabled = false])",
		returns = "effect",
	},
	fxAddBlood = {
		type = "function",
		args = "(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, [int count = 1, float brightness = 1.0])",
		returns = "bool",
	},
	fxAddBulletImpact = {
		type = "function",
		args = "(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, [int smokeSize = 1, int sparkCount = 1, float smokeIntensity = 1.0])",
		returns = "bool",
	},
	fxAddBulletSplash = {
		type = "function",
		args = "(float posX, float posY, float posZ)",
		returns = "bool",
	},
	fxAddDebris = {
		type = "function",
		args = "(float posX, float posY, float posZ, [int colorR = 255, int colorG = 0, int colorB = 0, int colorA = 255, float scale = 1.0, int count = 1])",
		returns = "bool",
	},
	fxAddFootSplash = {
		type = "function",
		args = "(float posX, float posY, float posZ)",
		returns = "bool",
	},
	fxAddGlass = {
		type = "function",
		args = "(float posX, float posY, float posZ, [int colorR = 255, int colorG = 0, int colorB = 0, int colorA = 255, float scale = 1.0, int count = 1])",
		returns = "bool",
	},
	fxAddGunshot = {
		type = "function",
		args = "(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, [bool includeSparks = true])",
		returns = "bool",
	},
	fxAddPunchImpact = {
		type = "function",
		args = "(float posX, float posY, float posZ, float dirX, float dirY, float dirZ)",
		returns = "bool",
	},
	fxAddSparks = {
		type = "function",
		args = "(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, [float force = 1, int count = 1, float acrossLineX = 0, float acrossLineY = 0, float acrossLineZ = 0, bool blur = false, float spread = 1, float life = 1])",
		returns = "bool",
	},
	fxAddTankFire = {
		type = "function",
		args = "(float posX, float posY, float posZ, float dirX, float dirY, float dirZ)",
		returns = "bool",
	},
	fxAddTyreBurst = {
		type = "function",
		args = "(float posX, float posY, float posZ, float dirX, float dirY, float dirZ)",
		returns = "bool",
	},
	fxAddWaterHydrant = {
		type = "function",
		args = "(float posX, float posY, float posZ)",
		returns = "bool",
	},
	fxAddWaterSplash = {
		type = "function",
		args = "(float posX, float posY, float posZ)",
		returns = "bool",
	},
	fxAddWood = {
		type = "function",
		args = "(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, [int count = 1, float brightness = 1.0])",
		returns = "bool",
	},
	getEffectDensity = {
		type = "function",
		args = "(effect theEffect)",
		returns = "float",
	},
	getEffectSpeed = {
		type = "function",
		args = "(effect theEffect)",
		returns = "float",
	},
	setEffectDensity = {
		type = "function",
		args = "(effect theEffect, float density)",
		returns = "bool",
	},
	setEffectSpeed = {
		type = "function",
		args = "(effect theEffect, float speed)",
		returns = "bool",
	},
	getElementBoundingBox = {
		type = "function",
		args = "(element theElement)",
		returns = "6 floats",
	},
	getElementDistanceFromCentreOfMassToBaseOfModel = {
		type = "function",
		args = "(element theElement)",
		returns = "float",
	},
	getElementRadius = {
		type = "function",
		args = "(element theElement)",
		returns = "float",
	},
	getElementsWithinRange = {
		type = "function",
		args = "(float x, float y, float z, float range [, string elemType = '' ])",
		returns = "table",
	},
	isElementCollidableWith = {
		type = "function",
		args = "(element theElement, element withElement)",
		returns = "bool",
	},
	isElementLocal = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementOnScreen = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementStreamable = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementStreamedIn = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementSyncer = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	isElementWaitingForGroundToLoad = {
		type = "function",
		args = "(element theElement)",
		returns = "bool",
	},
	setElementCollidableWith = {
		type = "function",
		args = "(element theElement, element withElement, bool enabled)",
		returns = "bool",
	},
	setElementMatrix = {
		type = "function",
		args = "(element theElement, table theMatrix)",
		returns = "bool",
	},
	setElementStreamable = {
		type = "function",
		args = "(element theElement, bool streamable)",
		returns = "bool",
	},
	engineApplyShaderToWorldTexture = {
		type = "function",
		args = "(element shader, string textureName [, element targetElement = nil, bool appendLayers = true])",
		returns = "bool",
	},
	engineGetModelIDFromName = {
		type = "function",
		args = "(string modelName)",
		returns = "int",
	},
	engineGetModelLODDistance = {
		type = "function",
		args = "(int model)",
		returns = "float",
	},
	engineGetModelNameFromID = {
		type = "function",
		args = "(int modelID)",
		returns = "string",
	},
	engineGetModelTextureNames = {
		type = "function",
		args = "(string modelId = '')",
		returns = "table",
	},
	engineGetVisibleTextureNames = {
		type = "function",
		args = "([string nameFilter = '*', string modelId = ''])",
		returns = "table",
	},
	engineImportTXD = {
		type = "function",
		args = "(txd texture, int model_id)",
		returns = "bool",
	},
	engineLoadCOL = {
		type = "function",
		args = "(string col_file / string raw_data)",
		returns = "col",
	},
	engineLoadDFF = {
		type = "function",
		args = "(string dff_file / string raw_data)",
		returns = "dff",
	},
	engineLoadTXD = {
		type = "function",
		args = "(string txd_file / string raw_data [, bool filteringEnabled = true])",
		returns = "txd",
	},
	engineLoadIFP = {
		type = "function",
		args = "(string ifp_file / string raw_data, string CustomBlockName)",
		returns = "ifp",
	},
	engineReplaceAnimation = {
		type = "function",
		args = "(ped thePed, string InternalBlockName, string InternalAnimName, string CustomBlockName, string CustomAnimName)",
		returns = "bool",
	},
	engineRestoreAnimation = {
		type = "function",
		args = "(ped thePed [, string InternalBlockName, string InternalAnimName])",
		returns = "bool",
	},
	engineRemoveShaderFromWorldTexture = {
		type = "function",
		args = "(element shader, string textureName [, element targetElement = nil])",
		returns = "bool",
	},
	engineReplaceCOL = {
		type = "function",
		args = "(col theCol, int modelID)",
		returns = "bool",
	},
	engineReplaceModel = {
		type = "function",
		args = "(dff theModel, int modelID [, bool alphaTransparency = false])",
		returns = "bool",
	},
	engineRestoreCOL = {
		type = "function",
		args = "(int modelID)",
		returns = "bool",
	},
	engineRestoreModel = {
		type = "function",
		args = "(int modelID)",
		returns = "bool",
	},
	engineSetAsynchronousLoading = {
		type = "function",
		args = "(bool enable, bool force)",
		returns = "bool",
	},
	engineSetModelLODDistance = {
		type = "function",
		args = "(int model, float distance)",
		returns = "bool",
	},
	triggerLatentServerEvent = {
		type = "function",
		args = "(string event, [int bandwidth = 5000, bool persist = false,] element theElement, [arguments ...])",
		returns = "bool",
	},
	triggerServerEvent = {
		type = "function",
		args = "(string event, element theElement, [arguments ...])",
		returns = "bool",
	},
	createFire = {
		type = "function",
		args = "(float x, float y, float z [, float size = 1.8 ])",
		returns = "bool",
	},
	extinguishFire = {
		type = "function",
		args = "([float x, float y, float z [, float radius = 1.0]])",
		returns = "bool",
	},
	guiBringToFront = {
		type = "function",
		args = "(element guiElement)",
		returns = "bool",
	},
	getChatboxLayout = {
		type = "function",
		args = "([string CVar])",
		returns = "bool/int/table",
	},
	guiCreateFont = {
		type = "function",
		args = "(string filepath [, int size = 9 ])",
		returns = "element",
	},
	guiGetAlpha = {
		type = "function",
		args = "(element guiElement)",
		returns = "float",
	},
	guiGetCursorType = {
		type = "function",
		args = "()",
		returns = "string",
	},
	guiGetEnabled = {
		type = "function",
		args = "(element guiElement)",
		returns = "bool",
	},
	guiGetFont = {
		type = "function",
		args = "(element guiElement)",
		returns = "string, element",
	},
	guiGetInputEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	guiGetInputMode = {
		type = "function",
		args = "()",
		returns = "string",
	},
	guiGetPosition = {
		type = "function",
		args = "(element guiElement, bool relative)",
		returns = "2 floats",
	},
	guiGetProperties = {
		type = "function",
		args = "(element guiElement)",
		returns = "table",
	},
	guiGetProperty = {
		type = "function",
		args = "(element guiElement, string property)",
		returns = "string",
	},
	guiGetScreenSize = {
		type = "function",
		args = "()",
		returns = "2 floats",
	},
	guiGetSize = {
		type = "function",
		args = "(element theElement, bool relative)",
		returns = "2 floats",
	},
	guiGetText = {
		type = "function",
		args = "(element guiElement)",
		returns = "string",
	},
	guiGetVisible = {
		type = "function",
		args = "(element guiElement)",
		returns = "bool",
	},
	guiMoveToBack = {
		type = "function",
		args = "(element guiElement)",
		returns = "bool",
	},
	guiSetAlpha = {
		type = "function",
		args = "(element guielement, float alpha)",
		returns = "bool",
	},
	guiSetEnabled = {
		type = "function",
		args = "(element guiElement, bool enabled)",
		returns = "bool",
	},
	guiSetFont = {
		type = "function",
		args = "(element guiElement, mixed font)",
		returns = "bool",
	},
	guiSetInputEnabled = {
		type = "function",
		args = "(bool enabled)",
		returns = "bool",
	},
	guiSetInputMode = {
		type = "function",
		args = "(string mode)",
		returns = "bool",
	},
	guiSetPosition = {
		type = "function",
		args = "(element theElement, float x, float y, bool relative)",
		returns = "bool",
	},
	guiSetProperty = {
		type = "function",
		args = "(element guiElement, string property, string value)",
		returns = "bool",
	},
	guiSetSize = {
		type = "function",
		args = "(element guiElement, float width, float height, bool relative)",
		returns = "bool",
	},
	guiSetText = {
		type = "function",
		args = "(element guiElement, string text)",
		returns = "bool",
	},
	guiSetVisible = {
		type = "function",
		args = "(element guiElement, bool state)",
		returns = "bool",
	},
	isChatBoxInputActive = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	isConsoleActive = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	isDebugViewActive = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	isMainMenuActive = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	isMTAWindowActive = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	isTransferBoxActive = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	setDebugViewActive = {
		type = "function",
		args = "(bool enabled)",
		returns = "bool",
	},
	guiCreateButton = {
		type = "function",
		args = "(float x, float y, float width, float height, string text, bool relative [, element parent = nil])",
		returns = "element",
	},
	guiCheckBoxGetSelected = {
		type = "function",
		args = "(element theCheckbox)",
		returns = "bool",
	},
	guiCheckBoxSetSelected = {
		type = "function",
		args = "(element theCheckbox, bool state)",
		returns = "bool",
	},
	guiCreateCheckBox = {
		type = "function",
		args = "(float x, float y, float width, float height, string text, bool selected, bool relative [, element parent = nil])",
		returns = "element",
	},
	guiCreateComboBox = {
		type = "function",
		args = "(float x, float y, float width, float height, string caption, bool relative [, element parent = nil])",
		returns = "element",
	},
	guiComboBoxAddItem = {
		type = "function",
		args = "(element comboBox, string value)",
		returns = "int",
	},
	guiComboBoxClear = {
		type = "function",
		args = "(element comboBox)",
		returns = "bool",
	},
	guiComboBoxGetItemText = {
		type = "function",
		args = "(element comboBox, int itemId)",
		returns = "string",
	},
	guiComboBoxGetSelected = {
		type = "function",
		args = "(element comboBox)",
		returns = "int",
	},
	guiComboBoxRemoveItem = {
		type = "function",
		args = "(element comboBox, int itemId)",
		returns = "bool",
	},
	guiComboBoxSetItemText = {
		type = "function",
		args = "(element comboBox, int itemId, string text)",
		returns = "bool",
	},
	guiComboBoxSetSelected = {
		type = "function",
		args = "(element comboBox, int itemIndex)",
		returns = "bool",
	},
	guiCreateEdit = {
		type = "function",
		args = "(float x, float y, float width, float height, string text, bool relative [, element parent = nil])",
		returns = "element",
	},
	guiEditGetCaretIndex = {
		type = "function",
		args = "(element theElement)",
		returns = "int",
	},
	guiEditGetMaxLength = {
		type = "function",
		args = "(gui-edit guiEdit)",
		returns = "int",
	},
	guiEditIsMasked = {
		type = "function",
		args = "(gui-edit guiEdit)",
		returns = "bool",
	},
	guiEditIsReadOnly = {
		type = "function",
		args = "(gui-edit guiEdit)",
		returns = "bool",
	},
	guiEditSetCaretIndex = {
		type = "function",
		args = "(element theElement, int index)",
		returns = "bool",
	},
	guiEditSetMasked = {
		type = "function",
		args = "(element theElement, bool status)",
		returns = "bool",
	},
	guiEditSetMaxLength = {
		type = "function",
		args = "(element guiEdit, int length)",
		returns = "bool",
	},
	guiEditSetReadOnly = {
		type = "function",
		args = "(element editField, bool status)",
		returns = "bool",
	},
	guiCreateGridList = {
		type = "function",
		args = "(float x, float y, float width, float height, bool relative [, element parent = nil])",
		returns = "element",
	},
	guiGridListAddColumn = {
		type = "function",
		args = "(element gridList, string title, float width)",
		returns = "int",
	},
	guiGridListAddRow = {
		type = "function",
		args = "(element gridList [, int/string itemText1, int/string itemText2, ... ])",
		returns = "int",
	},
	guiGridListAutoSizeColumn = {
		type = "function",
		args = "(element gridList, int columnIndex)",
		returns = "bool",
	},
	guiGridListClear = {
		type = "function",
		args = "(element gridList)",
		returns = "bool",
	},
	guiGridListGetColumnCount = {
		type = "function",
		args = "(element gridList)",
		returns = "int",
	},
	guiGridListGetColumnTitle = {
		type = "function",
		args = "(element guiGridlist, int columnIndex)",
		returns = "string",
	},
	guiGridListGetColumnWidth = {
		type = "function",
		args = "(element gridList, int columnIndex, bool relative)",
		returns = "bool",
	},
	guiGridListGetHorizontalScrollPosition = {
		type = "function",
		args = "(element guiGridlist)",
		returns = "float",
	},
	guiGridListGetItemColor = {
		type = "function",
		args = "(element gridList, int rowIndex, int columnIndex)",
		returns = "4 ints",
	},
	guiGridListGetItemData = {
		type = "function",
		args = "(element gridList, int rowIndex, int columnIndex)",
		returns = "var",
	},
	guiGridListGetItemText = {
		type = "function",
		args = "(element gridList, int rowIndex, int columnIndex)",
		returns = "string",
	},
	guiGridListGetRowCount = {
		type = "function",
		args = "(element gridList)",
		returns = "int",
	},
	guiGridListGetSelectedCount = {
		type = "function",
		args = "(element gridList)",
		returns = "int",
	},
	guiGridListGetSelectedItem = {
		type = "function",
		args = "(element gridList)",
		returns = "2 ints",
	},
	guiGridListGetSelectedItems = {
		type = "function",
		args = "(element gridList)",
		returns = "table",
	},
	guiGridListGetVerticalScrollPosition = {
		type = "function",
		args = "(element guiGridlist)",
		returns = "float",
	},
	guiGridListInsertRowAfter = {
		type = "function",
		args = "(element gridList [, int rowIndex, int/string itemText1, int/string itemText2, ... ])",
		returns = "int",
	},
	guiGridListRemoveColumn = {
		type = "function",
		args = "(element gridList, int columnIndex)",
		returns = "bool",
	},
	guiGridListRemoveRow = {
		type = "function",
		args = "(element gridList, int rowIndex)",
		returns = "bool",
	},
	guiGridListSetColumnTitle = {
		type = "function",
		args = "(element guiGridlist, int columnIndex, string title)",
		returns = "bool",
	},
	guiGridListSetColumnWidth = {
		type = "function",
		args = "(element gridList, int columnIndex, number width, bool relative)",
		returns = "bool",
	},
	guiGridListSetHorizontalScrollPosition = {
		type = "function",
		args = "(element guiGridlist, float fPosition)",
		returns = "bool",
	},
	guiGridListSetItemColor = {
		type = "function",
		args = "(element gridList, int rowIndex, int columnIndex, int red, int green, int blue [, int alpha = 255])",
		returns = "bool",
	},
	guiGridListSetItemData = {
		type = "function",
		args = "(element gridList, int rowIndex, int columnIndex, var data)",
		returns = "bool",
	},
	guiGridListSetItemText = {
		type = "function",
		args = "(element gridList, int rowIndex, int columnIndex, string text, bool section, bool number)",
		returns = "bool",
	},
	guiGridListSetScrollBars = {
		type = "function",
		args = "(element guiGridlist, bool horizontalBar, bool verticalBar)",
		returns = "bool",
	},
	guiGridListSetSelectedItem = {
		type = "function",
		args = "(element gridList, int rowIndex, int columnIndex [, bool bReset = true])",
		returns = "bool",
	},
	guiGridListSetSelectionMode = {
		type = "function",
		args = "(guiElement gridlist, int mode)",
		returns = "bool",
	},
	guiGridListSetSortingEnabled = {
		type = "function",
		args = "(element guiGridlist, bool enabled)",
		returns = "bool",
	},
	guiGridListSetVerticalScrollPosition = {
		type = "function",
		args = "(element guiGridlist, float fPosition)",
		returns = "bool",
	},
	guiCreateMemo = {
		type = "function",
		args = "(float x, float y, float width, float height, string text, bool relative [, element parent = nil])",
		returns = "gui-memo",
	},
	guiMemoGetCaretIndex = {
		type = "function",
		args = "(element theElement)",
		returns = "int",
	},
	guiMemoGetVerticalScrollPosition = {
		type = "function",
		args = "(gui-memo theMemo)",
		returns = "float",
	},
	guiMemoSetVerticalScrollPosition = {
		type = "function",
		args = "(gui-memo theMemo, float position)",
		returns = "bool",
	},
	guiMemoIsReadOnly = {
		type = "function",
		args = "(gui-memo theMemo)",
		returns = "bool",
	},
	guiMemoSetCaretIndex = {
		type = "function",
		args = "(gui-memo theMemo, int index)",
		returns = "bool",
	},
	guiMemoSetReadOnly = {
		type = "function",
		args = "(gui-memo theMemo, bool status)",
		returns = "bool",
	},
	guiCreateProgressBar = {
		type = "function",
		args = "(float x, float y, float width, float height, bool relative, [element parent = nil])",
		returns = "element",
	},
	guiProgressBarGetProgress = {
		type = "function",
		args = "(progressBar theProgressbar)",
		returns = "float",
	},
	guiProgressBarSetProgress = {
		type = "function",
		args = "(progressBar theProgressbar, float progress)",
		returns = "bool",
	},
	guiCreateRadioButton = {
		type = "function",
		args = "(float x, float y, float width, float height, string text, bool relative, [element parent = nil])",
		returns = "element",
	},
	guiRadioButtonGetSelected = {
		type = "function",
		args = "(element guiRadioButton)",
		returns = "bool",
	},
	guiRadioButtonSetSelected = {
		type = "function",
		args = "(element guiRadioButton, bool state)",
		returns = "bool",
	},
	guiCreateScrollBar = {
		type = "function",
		args = "(float x, float y, float width, float height, bool horizontal, bool relative, [element parent = nil])",
		returns = "gui-scrollbar",
	},
	guiScrollBarGetScrollPosition = {
		type = "function",
		args = "(gui-scrollBar theScrollBar)",
		returns = "float",
	},
	guiScrollBarSetScrollPosition = {
		type = "function",
		args = "(gui-scrollBar theScrollBar, float amount)",
		returns = "bool",
	},
	guiCreateScrollPane = {
		type = "function",
		args = "(float x, float y, float width, float height, bool relative, [gui-element parent = nil])",
		returns = "element",
	},
	guiScrollPaneGetHorizontalScrollPosition = {
		type = "function",
		args = "(element horizontalScrollPane)",
		returns = "float",
	},
	guiScrollPaneGetVerticalScrollPosition = {
		type = "function",
		args = "(element verticalScrollPane)",
		returns = "float",
	},
	guiScrollPaneSetHorizontalScrollPosition = {
		type = "function",
		args = "(element horizontalScrollPane, float position)",
		returns = "bool",
	},
	guiScrollPaneSetScrollBars = {
		type = "function",
		args = "(element scrollPane, bool horizontal, bool vertical)",
		returns = "bool",
	},
	guiScrollPaneSetVerticalScrollPosition = {
		type = "function",
		args = "(element verticalScrollPane, float position)",
		returns = "bool",
	},
	guiCreateStaticImage = {
		type = "function",
		args = "(float x, float y, float width, float height, string path, bool relative, [element parent = nil])",
		returns = "element",
	},
	guiStaticImageGetNativeSize = {
		type = "function",
		args = "(element theImage)",
		returns = "2 ints",
	},
	guiStaticImageLoadImage = {
		type = "function",
		args = "(element theElement, string filename)",
		returns = "bool",
	},
	guiCreateTabPanel = {
		type = "function",
		args = "(float x, float y, float width, float height, bool relative [, element parent = nil])",
		returns = "element",
	},
	guiGetSelectedTab = {
		type = "function",
		args = "(element tabPanel)",
		returns = "element",
	},
	guiSetSelectedTab = {
		type = "function",
		args = "(element tabPanel, element theTab)",
		returns = "bool",
	},
	guiCreateTab = {
		type = "function",
		args = "(string text, element parent)",
		returns = "element",
	},
	guiDeleteTab = {
		type = "function",
		args = "(element tabToDelete, element tabPanel)",
		returns = "bool",
	},
	guiCreateLabel = {
		type = "function",
		args = "(float x, float y, float width, float height, string text, bool relative, [element parent = nil])",
		returns = "element",
	},
	guiLabelGetColor = {
		type = "function",
		args = "(gui-element theLabel)",
		returns = "3 ints",
	},
	guiLabelGetFontHeight = {
		type = "function",
		args = "(element theLabel)",
		returns = "float",
	},
	guiLabelGetTextExtent = {
		type = "function",
		args = "(element theLabel)",
		returns = "float",
	},
	guiLabelSetColor = {
		type = "function",
		args = "(element theElement, int red, int green, int blue)",
		returns = "bool",
	},
	guiLabelSetHorizontalAlign = {
		type = "function",
		args = "(element theLabel, string align [, bool wordwrap = false])",
		returns = "bool",
	},
	guiLabelSetVerticalAlign = {
		type = "function",
		args = "(element theLabel, string align)",
		returns = "bool",
	},
	guiCreateWindow = {
		type = "function",
		args = "(float x, float y, float width, float height, string titleBarText, bool relative)",
		returns = "element",
	},
	guiWindowIsMovable = {
		type = "function",
		args = "(gui-window guiWindow)",
		returns = "bool",
	},
	guiWindowIsSizable = {
		type = "function",
		args = "(gui-window guiWindow)",
		returns = "bool",
	},
	guiWindowSetMovable = {
		type = "function",
		args = "(element theElement, bool status)",
		returns = "bool",
	},
	guiWindowSetSizable = {
		type = "function",
		args = "(element theElement, bool status)",
		returns = "bool",
	},
	getAnalogControlState = {
		type = "function",
		args = "(string control)",
		returns = "float",
	},
	getBoundKeys = {
		type = "function",
		args = "(string command/control)",
		returns = "table",
	},
	getCommandsBoundToKey = {
		type = "function",
		args = "(string theKey, string keyState)",
		returns = "table",
	},
	getKeyBoundToCommand = {
		type = "function",
		args = "(string command)",
		returns = "string",
	},
	getKeyState = {
		type = "function",
		args = "(string keyName)",
		returns = "bool",
	},
	createLight = {
		type = "function",
		args = "(int lightType, float posX, float posY, float posZ [, float radius = 3, int r = 255, int g = 0, int b = 0, float dirX = 0, float dirY = 0, float dirZ = 0, bool createsShadow = false ])",
		returns = "light",
	},
	getLightColor = {
		type = "function",
		args = "(light theLight)",
		returns = "3 ints",
	},
	getLightDirection = {
		type = "function",
		args = "(light theLight)",
		returns = "3 floats",
	},
	getLightRadius = {
		type = "function",
		args = "(light theLight)",
		returns = "float",
	},
	getLightType = {
		type = "function",
		args = "(light theLight)",
		returns = "int",
	},
	setLightColor = {
		type = "function",
		args = "(light theLight, float r, float g, float b)",
		returns = "bool",
	},
	setLightDirection = {
		type = "function",
		args = "(light theLight, float x, float y, float z)",
		returns = "bool",
	},
	setLightRadius = {
		type = "function",
		args = "(light theLight, float radius)",
		returns = "bool",
	},
	breakObject = {
		type = "function",
		args = "(object theObject)",
		returns = "bool",
	},
	getObjectMass = {
		type = "function",
		args = "(object theObject)",
		returns = "float",
	},
	isObjectBreakable = {
		type = "function",
		args = "(object theObject)",
		returns = "bool",
	},
	respawnObject = {
		type = "function",
		args = "(object theObject)",
		returns = "bool",
	},
	setObjectBreakable = {
		type = "function",
		args = "(object theObject, bool breakable)",
		returns = "bool",
	},
	setObjectMass = {
		type = "function",
		args = "(object theObject, float mass)",
		returns = "bool",
	},
	toggleObjectRespawn = {
		type = "function",
		args = "(object theObject, bool respawn)",
		returns = "bool",
	},
	isChatVisible = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	canPedBeKnockedOffBike = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	getPedAnalogControlState = {
		type = "function",
		args = "(ped thePed, string controlName)",
		returns = "float",
	},
	getPedAnimation = {
		type = "function",
		args = "(ped thePed)",
		returns = "2 strings",
	},
	getPedBonePosition = {
		type = "function",
		args = "(ped thePed, int bone)",
		returns = "3 floats",
	},
	getPedCameraRotation = {
		type = "function",
		args = "(ped thePed)",
		returns = "float",
	},
	getPedControlState = {
		type = "function",
		args = "(ped thePed, string control)",
		returns = "bool",
	},
	getPedMoveState = {
		type = "function",
		args = "(ped thePed)",
		returns = "string",
	},
	getPedOxygenLevel = {
		type = "function",
		args = "(ped thePed)",
		returns = "float",
	},
	getPedSimplestTask = {
		type = "function",
		args = "(ped thePed)",
		returns = "string",
	},
	getPedTargetCollision = {
		type = "function",
		args = "(ped targetingPed)",
		returns = "3 floats",
	},
	getPedTargetEnd = {
		type = "function",
		args = "(ped targetingPed)",
		returns = "3 floats",
	},
	getPedTargetStart = {
		type = "function",
		args = "(ped targetingPed)",
		returns = "3 floats",
	},
	getPedTask = {
		type = "function",
		args = "(ped thePed, string priority, int taskType)",
		returns = "4 strings",
	},
	getPedVoice = {
		type = "function",
		args = "(ped thePed)",
		returns = "2 strings",
	},
	getPedWeaponMuzzlePosition = {
		type = "function",
		args = "(ped thePed)",
		returns = "3 floats",
	},
	givePedWeapon = {
		type = "function",
		args = "(ped thePed, int weapon [, int ammo = 30, bool setAsCurrent = false ])",
		returns = "bool",
	},
	isPedDoingTask = {
		type = "function",
		args = "(ped thePed, string taskName)",
		returns = "bool",
	},
	isPedReloadingWeapon = {
		type = "function",
		args = "(ped thePed)",
		returns = "bool",
	},
	isPedTargetingMarkerEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	setAnalogControlState = {
		type = "function",
		args = "(string control [, float state])",
		returns = "bool",
	},
	setPedAimTarget = {
		type = "function",
		args = "(ped thePed, float x, float y, float z)",
		returns = "bool",
	},
	setPedAnalogControlState = {
		type = "function",
		args = "(ped thePed, string control, float state)",
		returns = "bool",
	},
	setPedCameraRotation = {
		type = "function",
		args = "(ped thePed, float cameraRotation)",
		returns = "bool",
	},
	setPedCanBeKnockedOffBike = {
		type = "function",
		args = "(ped thePed, bool canBeKnockedOffBike)",
		returns = "bool",
	},
	setPedControlState = {
		type = "function",
		args = "(ped thePed, string control, bool state)",
		returns = "bool",
	},
	setPedFootBloodEnabled = {
		type = "function",
		args = "(element thePlayer, bool enabled)",
		returns = "bool",
	},
	setPedLookAt = {
		type = "function",
		args = "(ped thePed, float x, float y, float z [, int time = 3000 [, int blend = 1000], element target = nil])",
		returns = "bool",
	},
	setPedOxygenLevel = {
		type = "function",
		args = "(ped thePed, float oxygen)",
		returns = "bool",
	},
	setPedTargetingMarkerEnabled = {
		type = "function",
		args = "(bool enabled)",
		returns = "bool",
	},
	setPedVoice = {
		type = "function",
		args = "(ped thePed, string voiceType, string voiceName)",
		returns = "bool",
	},
	getLocalPlayer = {
		type = "function",
		args = "()",
		returns = "player",
	},
	getPlayerMapBoundingBox = {
		type = "function",
		args = "()",
		returns = "4 ints",
	},
	isPlayerHudComponentVisible = {
		type = "function",
		args = "(string component)",
		returns = "bool",
	},
	isPlayerMapVisible = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	createProjectile = {
		type = "function",
		args = "(element creator, int weaponType [, float posX, float posY, float posZ, float force = 1.0, element target = nil, float rotX, float rotY, float rotZ, float velX, float velY, float velZ, int model])",
		returns = "projectile",
	},
	getProjectileCounter = {
		type = "function",
		args = "(projectile projectile)",
		returns = "int",
	},
	getProjectileCreator = {
		type = "function",
		args = "(projectile theProjectile)",
		returns = "element",
	},
	getProjectileForce = {
		type = "function",
		args = "(projectile theProjectile)",
		returns = "float",
	},
	getProjectileTarget = {
		type = "function",
		args = "(projectile theProjectile)",
		returns = "element",
	},
	getProjectileType = {
		type = "function",
		args = "(projectile theProjectile)",
		returns = "int",
	},
	setProjectileCounter = {
		type = "function",
		args = "(projectile projectile, int timeToDetonate)",
		returns = "bool",
	},
	getResourceGUIElement = {
		type = "function",
		args = "([resource theResource = getThisResource()])",
		returns = "element",
	},
	createTrayNotification = {
		type = "function",
		args = "(string notificationText, [ string iconType = 'default', bool useSound = true ])",
		returns = "bool",
	},
	downloadFile = {
		type = "function",
		args = "(string fileName)",
		returns = "bool",
	},
	getLocalization = {
		type = "function",
		args = "()",
		returns = "table",
	},
	isTrayNotificationEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	setClipboard = {
		type = "function",
		args = "(string theText)",
		returns = "bool",
	},
	setWindowFlashing = {
		type = "function",
		args = "(bool shouldFlash [, int count = 10])",
		returns = "bool",
	},
	createSearchLight = {
		type = "function",
		args = "(float startX, float startY, float startZ, float endX, float endY, float endZ, float startRadius, float endRadius [, bool renderSpot = true])",
		returns = "searchlight",
	},
	getSearchLightEndPosition = {
		type = "function",
		args = "(searchlight theSearchLight)",
		returns = "3 floats",
	},
	getSearchLightEndRadius = {
		type = "function",
		args = "(searchlight theSearchLight)",
		returns = "searchlight",
	},
	getSearchLightStartPosition = {
		type = "function",
		args = "(searchlight theSearchLight)",
		returns = "searchlight",
	},
	getSearchLightStartRadius = {
		type = "function",
		args = "(searchlight theSearchLight)",
		returns = "searchlight"
	},
	setSearchLightEndPosition = {
		type = "function",
		args = "(searchlight theSearchLight, float endX, float endY, float endZ)",
		returns = "searchlight"
	},
	setSearchLightEndRadius = {
		type = "function",
		args = "(searchlight theSearchLight, float endRadius)",
		returns = "searchlight"
	},
	setSearchLightStartPosition = {
		type = "function",
		args = "(searchlight theSearchLight, float startX, float startY, float startZ)",
		returns = "searchlight"
	},
	setSearchLightStartRadius = {
		type = "function",
		args = "(searchlight theSearchLight, float startRadius)",
		returns = "searchlight"
	},
	getHeliBladeCollisionsEnabled = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	getHelicopterRotorSpeed = {
		type = "function",
		args = "(vehicle heli)",
		returns = "float",
	},
	getVehicleAdjustableProperty = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "int",
	},
	getVehicleComponentPosition = {
		type = "function",
		args = "(vehicle theVehicle, string theComponent [, string base = 'root'])",
		returns = "3 floats",
	},
	getVehicleComponentRotation = {
		type = "function",
		args = "(vehicle theVehicle, string theComponent [, string base = 'parent'])",
		returns = "3 floats",
	},
	getVehicleComponentVisible = {
		type = "function",
		args = "(vehicle theVehicle, string theComponent)",
		returns = "bool",
	},
	getVehicleComponents = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "table",
	},
	getVehicleCurrentGear = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "int",
	},
	getVehicleGravity = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "3 floats",
	},
	getVehicleModelExhaustFumesPosition = {
		type = "function",
		args = "(int modelID)",
		returns = "3 floats",
	},
	getVehicleNitroCount = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "int",
	},
	getVehicleNitroLevel = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "float",
	},
	getVehicleTurnVelocity = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "3 floats",
	},
	isVehicleNitroActivated = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	isVehicleNitroRecharging = {
		type = "function",
		args = "(vehicle theVehicle)",
		returns = "bool",
	},
	isVehicleWheelOnGround = {
		type = "function",
		args = "(vehicle theVehicle, string|int wheel)",
		returns = "bool",
	},
	isVehicleWindowOpen = {
		type = "function",
		args = "(vehicle theVehicle, int window)",
		returns = "bool",
	},
	resetVehicleComponentPosition = {
		type = "function",
		args = "(vehicle theVehicle, string theComponent)",
		returns = "bool",
	},
	resetVehicleComponentRotation = {
		type = "function",
		args = "(vehicle theVehicle, string theComponent)",
		returns = "bool",
	},
	setHeliBladeCollisionsEnabled = {
		type = "function",
		args = "(vehicle theVehicle, bool collisions)",
		returns = "bool",
	},
	setHelicopterRotorSpeed = {
		type = "function",
		args = "(vehicle heli, float speed)",
		returns = "bool",
	},
	setVehicleAdjustableProperty = {
		type = "function",
		args = "(element theVehicle, int value)",
		returns = "bool",
	},
	setVehicleComponentPosition = {
		type = "function",
		args = "(vehicle theVehicle, string theComponent, float posX, float posY, float posZ [, string base = 'root'])",
		returns = "bool",
	},
	setVehicleComponentRotation = {
		type = "function",
		args = "(vehicle theVehicle, string theComponent, float rotX, float rotY, float rotZ [, string base = 'parent'])",
		returns = "bool",
	},
	setVehicleDirtLevel = {
		type = "function",
		args = "(vehicle theVehicle, int dirtLevel)",
		returns = "bool",
	},
	setVehicleGravity = {
		type = "function",
		args = "(vehicle theVehicle, float x, float y, float z)",
		returns = "bool",
	},
	setVehicleModelExhaustFumesPosition = {
		type = "function",
		args = "(int modelID, float posX, float posY, float posZ)",
		returns = "bool",
	},
	setVehicleNitroActivated = {
		type = "function",
		args = "(vehicle theVehicle, bool state)",
		returns = "bool",
	},
	setVehicleNitroCount = {
		type = "function",
		args = "(vehicle theVehicle, int count)",
		returns = "bool",
	},
	setVehicleNitroLevel = {
		type = "function",
		args = "(vehicle theVehicle, float level)",
		returns = "bool",
	},
	setVehicleTurnVelocity = {
		type = "function",
		args = "(vehicle theVehicle, float rx, float ry, float rz)",
		returns = "bool",
	},
	setVehicleWindowOpen = {
		type = "function",
		args = "(vehicle theVehicle, int window, bool open)",
		returns = "bool",
	},
	getWaterLevel = {
		type = "function",
		args = "(float posX, float posY, float posZ [, bool bCheckWaves = false])",
		returns = "float",
	},
	getWaterLevel = {
		type = "function",
		args = "(water theWater)",
		returns = "float",
	},
	isWaterDrawnLast = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	setWaterDrawnLast = {
		type = "function",
		args = "(bool bEnabled)",
		returns = "bool",
	},
	createWeapon = {
		type = "function",
		args = "(string theType, float x, float y, float z)",
		returns = "weapon",
	},
	fireWeapon = {
		type = "function",
		args = "(weapon theWeapon)",
		returns = "bool",
	},
	getWeaponAmmo = {
		type = "function",
		args = "(weapon theWeapon)",
		returns = "int",
	},
	getWeaponClipAmmo = {
		type = "function",
		args = "(weapon theWeapon)",
		returns = "int",
	},
	getWeaponFiringRate = {
		type = "function",
		args = "(weapon theWeapon)",
		returns = "int",
	},
	getWeaponFlags = {
		type = "function",
		args = "(weapon theWeapon, string theFlag)",
		returns = "bool",
	},
	getWeaponOwner = {
		type = "function",
		args = "(weapon theWeapon)",
		returns = "bool",
	},
	getWeaponState = {
		type = "function",
		args = "(weapon theWeapon)",
		returns = "string",
	},
	getWeaponTarget = {
		type = "function",
		args = "(weapon theWeapon)",
		returns = "nil/element/float",
	},
	resetWeaponFiringRate = {
		type = "function",
		args = "(weapon theWeapon)",
		returns = "bool",
	},
	setWeaponClipAmmo = {
		type = "function",
		args = "(weapon theWeapon, int clipAmmo)",
		returns = "bool",
	},
	setWeaponFiringRate = {
		type = "function",
		args = "(weapon theWeapon, int firingRate)",
		returns = "bool",
	},
	setWeaponFlags = {
		type = "function",
		args = "(weapon theWeapon, string theFlag, bool enable)",
		returns = "bool",
	},
	setWeaponState = {
		type = "function",
		args = "(weapon theWeapon, string theState)",
		returns = "bool",
	},
	setWeaponTarget = {
		type = "function",
		args = "(weapon theWeapon, element theTarget [, int theComponent = 255])",
		returns = "bool",
	},
	createSWATRope = {
		type = "function",
		args = "(float fx, float fy, float fZ, int duration)",
		returns = "bool",
	},
	getAircraftMaxHeight = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getBirdsEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	getGarageBoundingBox = {
		type = "function",
		args = "(int garageID)",
		returns = "4 floats",
	},
	getGaragePosition = {
		type = "function",
		args = "(int garageID)",
		returns = "3 floats",
	},
	getGarageSize = {
		type = "function",
		args = "(int garageID)",
		returns = "3 floats",
	},
	getGroundPosition = {
		type = "function",
		args = "(float x, float y, float z)",
		returns = "float",
	},
	getInteriorFurnitureEnabled = {
		type = "function",
		args = "(int roomID)",
		returns = "bool",
	},
	getInteriorSoundsEnabled = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	getNearClipDistance = {
		type = "function",
		args = "()",
		returns = "float",
	},
	getPedsLODDistance = {
		type = "function",
		args = "()",
		returns = "float",
	},
	setPedsLODDistance = {
		type = "function",
		args = "(float distance)",
		returns = "bool",
	},
	resetPedsLODDistance = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	getScreenFromWorldPosition = {
		type = "function",
		args = "(float x, float y, float z [, float edgeTolerance = 0.0, bool relative = true])",
		returns = "3 floats",
	},
	getVehiclesLODDistance = {
		type = "function",
		args = "()",
		returns = "2 floats",
	},
	getWorldFromScreenPosition = {
		type = "function",
		args = "(float x, float y, float depth)",
		returns = "3 floats",
	},
	isAmbientSoundEnabled = {
		type = "function",
		args = "(string theType)",
		returns = "bool",
	},
	isLineOfSightClear = {
		type = "function",
		args = "(float startX, float startY, float startZ, float endX, float endY, float endZ, [ bool checkBuildings = true, bool checkVehicles = true, bool checkPeds = true, bool checkObjects = true, bool checkDummies = true, bool seeThroughStuff = false, bool ignoreSomeObjectsForCamera = false, element ignoredElement = nil])",
		returns = "bool",
	},
	isWorldSoundEnabled = {
		type = "function",
		args = "(int group, [ int index = -1])",
		returns = "bool",
	},
	isWorldSpecialPropertyEnabled = {
		type = "function",
		args = "(string propname)",
		returns = "bool",
	},
	processLineOfSight = {
		type = "function",
		args = "()",
		returns = "",
	},
	resetAmbientSounds = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetVehiclesLODDistance = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	resetWorldSounds = {
		type = "function",
		args = "()",
		returns = "bool",
	},
	setAircraftMaxHeight = {
		type = "function",
		args = "(float height)",
		returns = "bool",
	},
	setAmbientSoundEnabled = {
		type = "function",
		args = "(string theType, bool enable)",
		returns = "bool",
	},
	setBirdsEnabled = {
		type = "function",
		args = "(bool enable)",
		returns = "bool",
	},
	setJetpackMaxHeight = {
		type = "function",
		args = "(float height)",
		returns = "bool",
	},
	setNearClipDistance = {
		type = "function",
		args = "(float distance)",
		returns = "bool",
	},
	setVehiclesLODDistance = {
		type = "function",
		args = "(float vehiclesDistance, float trainsAndPlanesDistance = vehiclesDistance * 2.14)",
		returns = "bool",
	},
	setWorldSoundEnabled = {
		type = "function",
		args = "(int group, [ int index = -1, ] bool enable [, bool immediate = false])",
		returns = "bool",
	},
	setWorldSpecialPropertyEnabled = {
		type = "function",
		args = "(string propname, bool enable)",
		returns = "bool",
	},
	testLineAgainstWater = {
		type = "function",
		args = "(float startX, float startY, float startZ, float endX, float endY, float endZ)",
		returns = "1 bool 3 floats",
	},
}